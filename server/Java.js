var documents = 
[
{"Category":"java - common","Complexity":"","Questions":"What is the difference between JDK and JRE?","Sample Answer":"JRE - Java Runtime Environment - java applications run on it; \n        - only virtual machine. It can only execute java programs\n\nJDK - Java Development Kit - fully featured software development kit for Java\n        - includes JRE, compilers and tools in it. \n        - allow you to develop java programs. Incl. JVM, compiler, other helping tools","field5":""},
{"Category":"java - common","Complexity":"","Questions":"What is JVM?","Sample Answer":"A program which executes other programs\nTwo primary functions\n   - Ensure platform independence\n   - Manage & optimize program memory","field5":""},
{"Category":"java - common","Complexity":"","Questions":".jar vs .ear vs .war","Sample Answer":".jar - EJB modules, which contains EJB and EJB deployment descriptor\n.war - Web modules which contain Servlet class files, JSP files, supporting files, GIF & HTML files\n.ear - .jar & .war files are packaged as JAR file with .ear extension & deployed into App Server","field5":""},
{"Category":"java - common","Complexity":"","Questions":"What is bytecode?","Sample Answer":"- Code compiled once, which could be run through a VM instead of computer’s processor directly.\r\n- So source code could be run on any platform (once it has been compiled and run through the VM)\r\n- Compiled format of Java program\r\n- Represented through .class files","field5":""}
,
{"Category":"java - common","Complexity":"","Questions":"What is classloader?","Sample Answer":"a subsystem of JVM that is used to load classes and interfaces. \nThere are many types of classloaders  \ne.g. Bootstrap classloader, Extension classloader, System classloader, Plugin classloader etc.\n=======================================================================\nThe Java Classloader is the part of the JRE that loads classes on demand (lazy loading) \ninto the JVM (Java Virtual Machine). \nClasses may be loaded from the local file system, a remote file system, or even the web.\n\nWhen the JVM is started, three class loaders are used: \n1. Bootstrap Classloader: Loads core java API file rt.jar from folder. \n2. Extension Classloader: Loads jar files from folder. \n3. System/Application Classloader: Loads jar files from path specified in the CLASSPATH env. variable.","field5":""},
{"Category":"common","Complexity":"","Questions":"SOLID principles","Sample Answer":"S - single responsibility\nO - open/close - open for EXTENSION, but closed for MODIFICATION\nL - Liskov Substitution - Objects in a program should be replaceable with instances \n                                      of their subtypes without altering the correctness of that program\nI - Interface segregation - Many client-specific interfaces are better than one general-purpose interface\nD - dependency inversion - One should depend upon abstractions, not concretions\n                                          - High-level modules should not depend on low-level modules. \n                                            Both should depend on abstractions.\n                                          - Abstractions should not depend on details. Details should depend on abstractions.","field5":""},
{"Category":"common","Complexity":"","Questions":"What are the steps in problem solving with Java?","Sample Answer":"Reproduce the problem\nDebug the current process, which shows the problem\nFind the problem\nAnalyse it\nSearch for different approaches, which can fix the problem\nImplement a solution\nTest the fixed code\nIf everything works fine document the change, if there is anything special.\nTest also other processes, which depend of the changed one.","field5":""},
{"Category":"java - common","Complexity":"","Questions":"What's the main difference between C++ and Java","Sample Answer":"JVM, platform independence, Java has garbage collection\nC++ -> procedural & OOP, Java -> pure OOP","field5":""},
{"Category":"java - common","Complexity":"","Questions":"Java SE vs Java EE","Sample Answer":"Java SE - Standard Edition. \nThis is the core Java programming platform. It contains all of the libraries and APIs \nthat any Java programmer should learn (java.lang, java.io, java.math, java.net, java.util, etc...).\nJava EE\nfor very large scale apps or distributed systems. \nBuilt on top of Java SE, it provides libraries for database access (JDBC, JPA), \nremote method invocation (RMI), messaging (JMS), web services, XML processing, \nand defines standard APIs for Enterprise JavaBeans, servlets, portlets, Java Server Pages, etc...","field5":""},
{"Category":"java - common","Complexity":"","Questions":"New features in java 7","Sample Answer":"Diamond operator ( Generics)\nUsing String in switch statement\nAutomatic resource management (try with resources)\nMulticatch block\nNumeric literals with underscore (int thousand =  1_000;)\nJava.NIO 2.0","field5":""},
{"Category":"java - common","Complexity":"","Questions":"New features in java 8","Sample Answer":"forEach method in Iterable interface\ndefault and static methods in Interfaces\njava.time / java.time.format / java.time.zone\nFunctional interface - interface with exactly one abstract method\n                                - we don’t have to mark the interface as @FunctionalInterface explicitly\nLambda - allow us to create anonymous classes of functional interfaces easily\nJava Stream API for Bulk Data Operations on Collections","field5":""}
,
{"Category":"java - common","Complexity":"","Questions":"New features in java 9","Sample Answer":"Modules\njlink tool - allow us to create a minimal runtime environment, containing just those modules \n                necessary to run your app (we create a minimal runtime image optimized for our app)\nJShell - an interactive Java PERL\nImproved Javadoc\nMulti-release JARs\nCollection - factory methods\nStream API improvements\nPrivate methods in interfaces\nHTTP/2 - new ways of making HTTP calls","field5":""},
{"Category":"java - common","Complexity":"","Questions":"New features in java 10","Sample Answer":"Local variable type inference - VAR","field5":""},
{"Category":"java - common","Complexity":"","Questions":"New features in java 11","Sample Answer":"Enhancements to various of Java classes \nType inference - Consumer<String> printer = (var s) -> System.out.println(s); \nRemove Java EE and CORBA Modules (depr. Java 9)","field5":""},
{"Category":"common","Complexity":"","Questions":"Do you know any functional languages?","Sample Answer":"Haskell, Erlang, Lisp","field5":""},
{"Category":"common","Complexity":"","Questions":"Do you know any logical languages?","Sample Answer":"Prolog","field5":""},
{"Category":"common","Complexity":"","Questions":"Authentication vs. authorization","Sample Answer":"Authentication: The user login credentials are passed to an authenticate API (on the server). \nOn the server side validation of the credentials happens and a JSON Web Token (JWT) is returned. \nJWT is a JSON object that has some information or attributes about the current user.  \nOnce the JWT is given to the client, the client or the user will be identified with that JWT.\n\nAuthorization: After logging in successfully, the authenticated or genuine user \ndoes not have access to everything. The user is not authorized to access someone else’s data,  \nhe/she is authorized to access some data.","field5":""}
,
{"Category":"common","Complexity":"","Questions":"Procedural vs. OOP","Sample Answer":"Procedural => a set of procedures which invoke each other\nProcedural => hard to reuse, no abstract data structures","field5":""},
{"Category":"common","Complexity":"","Questions":"Difference between compiled vs. interpreted languages?","Sample Answer":"- With a compiled language, code you enter is reduced to a set of machine-specific instructions \n  before being saved as an executable file. \n- With interpreted languages, the code is saved in the same format that you entered.","field5":""},
{"Category":"common","Complexity":"","Questions":"What is a variable scope?","Sample Answer":"validity, visibillity area\nglobal vs. local","field5":""},
{"Category":"common","Complexity":"","Questions":"What is method's call stack","Sample Answer":"List of methods which was called is known as the call stack\nwhen a method calls a method, the new method is put on top of the call stack\nwhen the tp method finishes, it's removed from call stack\nmethod in the lower level finishes when all the methods on top of it are finished","field5":""},
{"Category":"common","Complexity":"","Questions":"Heap vs. stack vs. perm space","Sample Answer":"Heap space: Store all live objects\nStack space: Store references to the object for variable in method call or variable instantiation\nPerm space: Store loaded classes information","field5":""},
{"Category":"common","Complexity":"","Questions":"Early vs. late binding","Sample Answer":"early (or static) binding refers to compile time binding \nlate (or dynamic) binding refers to runtime binding (for example when you use reflection).","field5":""},
{"Category":"","Complexity":"","Questions":"What defines the method signature in Java?","Sample Answer":"method name and the number, type and order of its parameters. \nReturn types and thrown exceptions are not considered to be a part of the method signature","field5":""},
{"Category":"","Complexity":"","Questions":"What if I write static public void instead of public static void?","Sample Answer":"Program compiles and runs properly.","field5":""},
{"Category":"dates","Complexity":"","Questions":"Is the following snippet ok?\nDate d = new Date();\nDateFormat df = new DateFormat(DateFormat.Long);\nSystem.out.println(dt.format(d));","Sample Answer":"Will not compile, bacause DateFormat is an abstract class. => DateFormat.getDateInstanace();","field5":""},
{"Category":"string","Complexity":"","Questions":"What are the two ways of initializing a string in Java ?","Sample Answer":"Candidate to explain the difference between creating the string with String hello = \"hello\"; \nand String hello = new String(\"hello\"); ? \nWhich one is prefered ? \nWhat are consequeces when the string is created in the constant pool instead of the jvm heap ?","field5":""},
{"Category":"string","Complexity":"","Questions":"What is the meaning of immutable in terms of String?","Sample Answer":"The simple meaning of immutable is unmodifiable or unchangeable.\nOnce string object has been created, its value can't be changed.","field5":""},
{"Category":"string","Complexity":"","Questions":"Why string objects are immutable in java?","Sample Answer":"Because java uses the concept of string literal. Suppose there are 5 reference variables,\nall referes to one object \"sachin\".\nIf one reference variable changes the value of the object, it will be affected to all the reference variables.\nThat is why string objects are immutable in java.","field5":""},
{"Category":"string","Complexity":"","Questions":"How many objects will be created in the following code?\n \n String s1=\"Welcome\";\n String s2=\"Welcome\";\n String s3=\"Welcome\";","Sample Answer":"Only one object.","field5":""},
{"Category":"string","Complexity":"","Questions":"What is the basic difference between string and stringbuffer object?","Sample Answer":"String is an immutable object. StringBuffer is a mutable object.","field5":""},
{"Category":"string","Complexity":"","Questions":"What's the difference between StringBuilder and StringBuffer","Sample Answer":"StringBuffer is synchronized, StringBuilder is not","field5":""},
{"Category":"string","Complexity":"","Questions":"What will happen from the following code:\nString s1 = \"Welcom!\"\ns1.split(\"\\s\")","Sample Answer":"It will not compile, it should be split(\"\\\\s\")\n\\\\s - stands for whitespace","field5":""},
{"Category":"constructor","Complexity":"","Questions":"What is the purpose of default constructor?","Sample Answer":"The default constructor provides the default values to the objects.\nThe java compiler creates a default constructor only if there is no constructor in the class","field5":""},
{"Category":"constructor","Complexity":"","Questions":"Does constructor return any value?","Sample Answer":"yes, that is current instance \n(You cannot use return type yet it returns a value)","field5":""},
{"Category":"","Complexity":"","Questions":"Does an Enum has constructor. If yes, are there something special?","Sample Answer":"Yes. The constructor is always private. You cannot make it public or protected.\nIf an enum type has no constructor declarations, then a private constructor without \nparams is provided automatically","field5":""},
{"Category":"static","Complexity":"","Questions":"What can be static in Java","Sample Answer":"Variable\nMethod\nBlock\nNested class","field5":""},
{"Category":"static","Complexity":"","Questions":"What is static variable?","Sample Answer":"static variable is used to refer the common property of all objects \n(that is not unique for each object) \ne.g. company name of employees, college name of students etc.\n \nstatic variable gets memory only once in class area at the time of class loading.","field5":""},
{"Category":"static","Complexity":"","Questions":"What is static method?","Sample Answer":"A static method belongs to the class rather than object of a class.\nA static method can be invoked without the need for creating an instance of a class.\nstatic method can access static data member and can change the value of it.","field5":""},
{"Category":"static","Complexity":"","Questions":"Can you declare an interface method static?","Sample Answer":"No, because methods of an interface is abstract by default, and static and abstract keywords can't be used together.\nNo, until java 8","field5":""},
{"Category":"static","Complexity":"","Questions":"What are static initializers and when would you use them?","Sample Answer":"A static initializer gives you the opportunity to run code during the initial loading of a class and \nit guarantees that this code will only run once and will finish running before your class \ncan be accessed in any way.\n\nThey are useful for performing initialization of complex static objects or to register a type with \na static registry, as JDBC drivers do.\n\nSuppose you want to create a static, immutable Map containing some feature flags. \nJava doesn’t have a good one-liner for initializing maps, so you can use static initializers instead:\npublic static final Map<String, Boolean> FEATURE_FLAGS;\n        static {\n            Map<String, Boolean> flags = new HashMap<>();\n            flags.put(\"frustrate-users\", false);\n            flags.put(\"reticulate-splines\", true);\n            flags.put(...);\n            FEATURE_FLAGS = Collections.unmodifiableMap(flags);\n        }\nWithin the same class, you can repeat this pattern of declaring a static field and immediately \ninitializing it, since multiple static initializers are allowed.","field5":""}
,
{"Category":"final","Complexity":"","Questions":"Can we intialize blank final variable?","Sample Answer":"Yes, only in constructor if it is non-static. \nIf it is static blank final variable, it can be initialized only in the static block.","field5":""},
{"Category":"final","Complexity":"","Questions":"What can be final in Java?","Sample Answer":"Variable cannot be changed\r\nMethod cannot be overridden\r\nClass cannot be subclassed","field5":""},
{"Category":"final","Complexity":"","Questions":"What is the difference between final, finally and finalize?","Sample Answer":"final - it's keyword - class, variable, method \nfinally - it's block of code - It's used to place important code, which will be executed whethever exception is handled ot not\nfinalize - It's a method - perform clean up processing just before object is garbage collected","field5":""},
{"Category":"basic OOP","Complexity":"","Questions":"What is the difference between Class and object in Java?","Sample Answer":"","field5":""},
{"Category":"basic OOP","Complexity":"","Questions":"What is the difference between this vs. super in Java","Sample Answer":"current vs. base instance","field5":""},
{"Category":"enum","Complexity":"","Questions":"What is typical for enum?","Sample Answer":"Enum is typesafe.\n - Can declare a pricate constructor\n - Implicitly implement Comparable\n - Can implement an interface","field5":""},
{"Category":"equals","Complexity":"","Questions":" \"==\" vs. equals","Sample Answer":"","field5":""},
{"Category":"hashcode","Complexity":"","Questions":"What is hashcode?","Sample Answer":"hashCode() returns an integer value, generated by a hashing algorithm\nObjects that are equal (according to their equals()) must return the same hash code. It’s not required for different objects to return different hash codes.\n\nThe general contract of hashCode() states:\n\n- Whenever it is invoked on the same object more than once during an execution of a Java application, \n  hashCode() must consistently return the same value, provided no information used in equals \n   comparisons on the object is modified. This value needs not remain consistent from one execution \n   of an application to another execution of the same application\n- If two objects are equal according to the equals(Object) method, then calling the hashCode() \n  method on each of the two objects must produce the same value\n- It is not required that if two objects are unequal according to the equals(java.lang.Object) method, \n  then calling the hashCode method on each of the two objects must produce distinct integer results. \n  However, developers should be aware that producing distinct integer results for unequal \n  objects improves the performance of hash tables","field5":""}
,
{"Category":"hashcode","Complexity":"","Questions":"How can you solve the problem with collisions by HashMap?","Sample Answer":"by overriding hashcode and equals methods","field5":""},
{"Category":"hashcode/equals","Complexity":"","Questions":"Is there something common between hashcode and equals?","Sample Answer":"If you override the one of them, you have to override the other also.","field5":""},
{"Category":"encapsulation","Complexity":"","Questions":"What is encapsulation?","Sample Answer":"","field5":""},
{"Category":"encapsulation","Complexity":"","Questions":"Can we declare more than one public class in a file?","Sample Answer":"No","field5":""},
{"Category":"encapsulation","Complexity":"","Questions":"Is it possible for a top level class to be private?","Sample Answer":"No\nOnly public, abstract, and final modifiers are permitted for an outer class; \nusing private, protected, or static will result in a compiler error.","field5":""},
{"Category":"encapsulation","Complexity":"","Questions":"Can you access the private method from outside the class?","Sample Answer":"Yes, by changing the runtime behaviour of a class if the class is not secured.","field5":""},
{"Category":"encapsulation","Complexity":"","Questions":"Where is \"reason\" visible?\nclass OuterWorld {\n   public InnerPeace i = new InnerPeace();\n   private class InnerPeace {\n       private String reason = \"none\";\n   }\n}","Sample Answer":"reason is accessible in InnerPeace and in OuterWorld","field5":""},
{"Category":"polymorphism","Complexity":"","Questions":"What is polymorphism?","Sample Answer":"Polymorphism is the ability of an object to take on many forms. The most common use of \npolymorphism in OOP occurs when a parent class reference is used to refer to a child class object. \nRuntime polymorphism or Dynamic Method Dispatch is a process in which a call to an \noverridden method is resolved at runtime rather than compile-time.","field5":""},
{"Category":"polymorphism","Complexity":"","Questions":"What is static and dynamic binding ?","Sample Answer":"1. Compile time polymorphism - a.k.a. static binding or early binding. \nObject binds with it's functionality at compile time. Method overloading - method is selected at compiletime. \n2. Dynamic / late / runtime binding - Runtime polymorphism is achieved by method overriding. \nObject is bound to it's functionality at runtime.","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"Are you familiar with the Diamond problem?","Sample Answer":"Yes, 1 class inherited from 2 parent classes, which have method(1 or more) with the same signature (C++)","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"Are constructors inherited?","Sample Answer":"In simple words, a constructor cannot be inherited, since in subclasses it has a different name (the name of the subclass).","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"What is multiple inheritance. Is it supported by Java?","Sample Answer":"","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"Is the following code snippet ok?","Sample Answer":"interface T1 {\n     int VALUE = 1;\n     void m1();\n}\n\ninterface T2 {\n    int VALUE = 2;\n}\n\nclass TestClass implements T1, T2 {\n    public void m1 () { }\n}\n\nIt's nothing wrong with this code. \n//If we refer them, then it will fail. We have to cast explicitly","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"Can you extend an enum?","Sample Answer":"No. It's implicitly final, so you cannot extend it.","field5":""},
{"Category":"inheritance","Complexity":"","Questions":"Can an enum implement an interface?","Sample Answer":"Yes","field5":""},
{"Category":"abstract","Complexity":"","Questions":"What is abstraction?","Sample Answer":"Abstraction is a process of hiding the implementation details \nand showing only functionality to the user.\nAbstraction lets you focus on what the object does instead of how it does it.","field5":""},
{"Category":"abstract","Complexity":"","Questions":"Difference between abstract class and interface","Sample Answer":"Interface - only unimplemented methods\nAbstract class - unimplemented + implemented methods\nAlways when possible -> Interface (can inherit only from 1 class, but implement more than 1 interface)","field5":""},
{"Category":"abstract","Complexity":"","Questions":"Can we have a constructor in abstract classes ?","Sample Answer":"YES","field5":""},
{"Category":"abstract","Complexity":"","Questions":"Can there be any abstract method without abstract class?","Sample Answer":"No","field5":""},
{"Category":"abstract","Complexity":"","Questions":"Can you use abstract and final both with a method?","Sample Answer":"No, because abstract method needs to be overridden whereas you can't override final method.","field5":""},
{"Category":"abstraction","Complexity":"","Questions":"\"instanceof\" - purpose. Give example for its usage","Sample Answer":"","field5":""},
{"Category":"abstract","Complexity":"","Questions":"Which line will fail the compilation?\n\n1. class A {\n2.  public static void main(String[] args){\n3.   A a = new A();\n4.   B a = new B();\n5.   a = b;\n6.   b = a;\n7.   a = (B)b;\n8.   b = (B)a;\n9.  }\n10.}\nclass B extends A {}","Sample Answer":"Line 6 => b = a;\nExplanation: because ‘a’ is declared of class A and ‘B’ which is subclass of A. So an explicit cast is needed","field5":""}
,
{"Category":"abstract","Complexity":"","Questions":"When designing an abstract class, why should you avoid calling abstract methods inside its constructor?","Sample Answer":"This is a problem of initialization order. \nThe subclass constructor will not have had a chance to run yet and there is no way to force it to run it before the parent class.","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Which variables of the encapsulating class an inner class access \nif the inner class is defined in an instance of the encapsulating class?","Sample Answer":"All static variables\nAll final instance variables\nAll automatic variables\nAll final automatic variables","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Is it possible to declare a nested class as static?","Sample Answer":"Yes","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Is it allowed for anonymous inner class to extend an abstract class?","Sample Answer":"Yes\n\nabstract class SomeClass {\n   public abstract void m1();\n}\npublic class TestClass {\n   public SomeClass getSomeClass() {\n       return new SomeClass() { public void m1() {} };\n   }\n}","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Is it allowed for a static nested class to contain non-static \nmember variables?","Sample Answer":"Yes","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"What's the difference between inner class and static nested class?","Sample Answer":"Inner class – is a nested class that is not explicitly/implicitly declared static \nStatic nested class – every class whose declaration is within the body of other class/interface\n//a class declared within an interface is implicitly static","field5":""}
,
{"Category":"nested/local classes","Complexity":"","Questions":"Can we define an Enum inside constructor or method?","Sample Answer":"No","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Can we declare a method within the main method?","Sample Answer":"Class created inside the main methods is final","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Can we define an anonymous class inside a static method","Sample Answer":"Yes","field5":""},
{"Category":"nested/local classes","Complexity":"","Questions":"Can we declare an interface within another interface or class","Sample Answer":"Yes. Such interfaces are known as nested interfaces","field5":""},
{"Category":"obj interaction","Complexity":"","Questions":"What is composition?","Sample Answer":"Holding the reference of the other class within some other class is known as composition.","field5":""},
{"Category":"obj interaction","Complexity":"","Questions":"Difference between composition and aggregation","Sample Answer":"Composition - the components cannot exist without the base class,\nAggregation - can","field5":""},
{"Category":"obj interaction","Complexity":"","Questions":"What is a dependency?","Sample Answer":"Dependency is a weaker form of relationship and in code terms \nindicates that a class uses another by parameter or return type.\nDependency is a form of association.","field5":""},
{"Category":"obj interaction","Complexity":"","Questions":"What is the difference between Strong, Soft, and Weak References?","Sample Answer":"Strong reference:\nAny object which has a strong reference pointing to it is not eligible for GC(garbage collector).\nThe Strong reference is the most commonly used type of Reference. \n\nExample: Integer x = 1; //The variable 'X' has a strong reference to an Integer object with value 1.\n\nSoft reference:\nAny object which has a soft reference pointing to it is eligible for GC(garbage collector), \nbut will be collected only when JVM absolutely needs memory.\nExample:\nInteger x = 1;  \nSoftReference<Integer> soft = new SoftReference<Integer>(x); \nx = null;\n\nThe X object has a strong reference pointing to it. Next, we are wrapping 'X' strong reference \ninto a soft reference. After making that strong reference null, a X object is eligible for GC but \nwill be collected only when JVM absolutely needs memory.\n\nWeak Reference:\nThe objects that are referenced only by weak references are garbage collected eagerly. The GC won’t wait until it needs memory in that case.\nExample:\nInteger x = 1;  \nWeakReference<Integer> weak = new WeakReference<Integer>(x); \nx = null;\n\nWhen we made a 'X' reference null, the 'X' object will be garbage collected in the next GC cycle, \nas there is no other strong reference pointing to it.","field5":""}
,
{"Category":"override","Complexity":"","Questions":"What is method overriding?","Sample Answer":"If a subclass provides a specific implementation of a method that is already provided by its parent class, \nit is known as Method Overriding. \nIt is used for runtime polymorphism and to provide the specific implementation of the method","field5":""},
{"Category":"override","Complexity":"","Questions":"Can we override private or static methods of a class ?","Sample Answer":"NO. Method hiding happens.","field5":""},
{"Category":"override","Complexity":"","Questions":"Can we override method by just changing the access specifier ?","Sample Answer":"NO","field5":""},
{"Category":"override","Complexity":"","Questions":"Can we change the exception in throws clause by overriding?","Sample Answer":"Yes, but only with more concrete one (smaller)","field5":""},
{"Category":"override","Complexity":"","Questions":"Can we change the accessibility of a method by overriding","Sample Answer":"No. Оverriding method cannot make the overridden method more private","field5":""}
,
{"Category":"overload","Complexity":"","Questions":"What is method overloading?","Sample Answer":"If a class have multiple methods by same name but different parameters\nIt increases the readability of the program.","field5":""},
{"Category":"overload","Complexity":"","Questions":"Why method overloading is not possible by changing\nthe return type in java?","Sample Answer":"Because of ambiguity.\nNormally no, but there are special cases when this is possible - the following conditions must be\nsatisfied - return type of both methods are not primitive; there is a parent/child relationship in the\nreturn types of both methods; method of parent class returns object of parent class and method \nof child class returns object of child class. - Candidate to give simple code example.","field5":""},
{"Category":"","Complexity":"","Questions":"Nested classes can be static or non-static (also called an inner class). \nHow do you decide which to use? \nDoes it matter?","Sample Answer":"The key difference between is that inner classes have full access to the fields and methods \nof the enclosing class. This can be convenient for event handlers, but comes at a cost: every \ninstance of an inner class retains and requires a reference to its enclosing class.","field5":""},
{"Category":"casting","Complexity":"","Questions":"When can an object reference be cast to an interface reference?","Sample Answer":"An object reference can be cast to an interface reference when the object implements the referenced interface.","field5":""},
{"Category":"casting","Complexity":"","Questions":"What is upcasting and downcasting ?","Sample Answer":"1. Upcasting - automatic and implicit - candidate to give examples - it's safe\n2. Downcasting - explicit - candidate to give example - it's not safe","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What are the two basic kind of exceptions in Java ?","Sample Answer":"Checked - compile time and Unchecked - runtime.","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What is the base class for Error and Exception?","Sample Answer":"Throwable","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"Is the following snippet going to compile?\nString s = null;\nswitch(s) {\n}","Sample Answer":"Yes, but it will throw a NullPointerException","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What is stack trace?","Sample Answer":"It contains detailed information about the exception\nConsist of: full name of the exception + message of the exception","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What's the difference between throw and throws?","Sample Answer":"","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What is difference between \nChecked Exception and Unchecked Exception?","Sample Answer":"1)Checked Exception - The classes that extend Throwable class except RuntimeException and Error \nare known as checked exceptions \ne.g.IOException,SQLException etc. Checked exceptions are checked at compile-time.\n \n 2)Unchecked Exception - The classes that extend RuntimeException are known as unchecked exceptions \ne.g. ArithmeticException,NullPointerException etc.  Unchecked exceptions are not checked at compile-time.","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What is exception propagation?","Sample Answer":" An exception is first thrown from the top of the stack and if it is not caught, \nit drops down the call stack to the previous method","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"What's Java multicatch block. Are there any limitations?","Sample Answer":"possible since Java 7\nif all the exceptions belong to the same class hierarchy, you can simply catch that base exception type.\nAlso note that you cannot catch both ExceptionA and ExceptionB in the same block if ExceptionB is inherited, either directly or indirectly, from ExceptionA. The compiler will complain:\r\nAlternatives in a multi-catch statement cannot be related by subclassing Alternative ExceptionB is a subclass of alternative ExceptionA","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"1. public interface Xyz {\n2.   void abc() throws IOException\n3. }\n4.\n5. public interface Pqr {\n6. void abc() throws FileNotFoundException\n7. }\n8.\n9.  public class Implementation implements Xyz, Pqr {\n10.   public void abc() throws FileNotFoundException();\n11.}","Sample Answer":"Compile exception line 10, because FileNotFoundException is a subtype of IOException. \nSo abc() does not throws IOException.","field5":""},
{"Category":"exceptions","Complexity":"","Questions":"Is a finally block executed when an exception is thrown from \na try block that does not have a catch block, and if so, when?","Sample Answer":"A finally block is executed even if an exception is thrown or propagated to the calling code block.","field5":""},
{"Category":"","Complexity":"","Questions":"In what order are Resources closed? - try with resources","Sample Answer":"in reverse order of their creation\n//catch and finally blocks are executed after the resource opened in try-with-resources is closed.\n//Resources are closed at the end of the try block even if try block throws an exception","field5":""},
{"Category":"collections","Complexity":"","Questions":"Do you know any data structures?","Sample Answer":"Collections Framework","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the difference between List and Set?","Sample Answer":"List can contain duplicate elements whereas Set contains only unique elements.","field5":""},
{"Category":"collections","Complexity":"","Questions":"Which are the implementation of List interface in Java?","Sample Answer":"ArrayList, LinkedList","field5":""},
{"Category":"collections","Complexity":"","Questions":"Do you know what's the purpose of the following Arrays/Collections methods:\nceiling\nfloor\nhigher\nlower","Sample Answer":"E ceiling(E e) – returns the least element greater than or equal to the given element, or null if there is no such element.\nE floor(E e) – returns the greatest element in this set less than or equal to the element or null\nE higher(E e) – returns the least element in this set strictly greater than the given element or null\nE lower(E e) – returns the greatest element in this set strictly less than the given elemen or null","field5":""}
,
{"Category":"","Complexity":"","Questions":"What is the difference between compare() and compareTo() methods?","Sample Answer":"Comparable interface -> compareTo()\nComparator -> compare()","field5":""},
{"Category":"collections","Complexity":"","Questions":"What are the Set implementations in Java","Sample Answer":"HahsSet, \nLinkedHashSet, \nTreeSet (implements SortedSet, NavigableSet)","field5":""},
{"Category":"","Complexity":"","Questions":"What is the requirement for our objects in order to \ninsert them in a TreeSet?","Sample Answer":"TreeSet – The foremost requirement of a TreeSet is that not only the elements must implement \nComparable interface ( compareTo() ) but they must also be mutually comparable \n(mutually – не може на единият клас compareTo да е String, на другия int )\nако искаме treeSet.add(new Person(“someName”)) -> Person трябва да имплементира Comparable","field5":""}
,
{"Category":"collections","Complexity":"","Questions":"What is the difference between HashSet and TreeSet?","Sample Answer":"HashSet maintains no order whereas TreeSet maintains ascending order.","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the difference between HashMap and TreeMap?","Sample Answer":"","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the difference between HashSet and HashMap?","Sample Answer":"HashSet contains only values whereas HashMap contains entry(key,value).\nHashSet can be iterated but HashMap need to convert into Set to be iterated.","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is LinkedHashSet?","Sample Answer":"Maintains the insertion order - elements gets sorted in which they have been added to the Set","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is Iterable? What is Iterator?","Sample Answer":"both are interfaces provided by Java's Collection Framework\nIterable - a collection which can be traversed. Allow us to use for-each loop - does happens by \n               internal call to iterator() method on the object.\n               for(String el : myList) { }\nIterator - allows us to iterate over some other object which is a collection of some kind.\n               Iterator<Integer> Iterator = myList.iterator();\n               while(iterator.hasNext()) { int el = iterator.next(); }\n               since java 8 we can use: \n                     Iterator<Integer> Iterator = myList.iterator();\n                     iterator.forEachRemaining(System.out::println);\n                  or\n                    for(Integer i: (Iterable<Integer>) () -> iterator) {}","field5":""},
{"Category":"collections","Complexity":"","Questions":"If you have to store elements in a collection, where every element \nshould be unique, which Java collection are you going to choose?","Sample Answer":"Set","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is a queue?","Sample Answer":"FIFO = First-In-First-Out\ninterface - implementations: LinkedList, PriorityQueue","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is a priorityQueue?","Sample Answer":"The elements are ordered according to their natural ordering\nThe head of this queue it the least element with respect to the specified ordering","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is Deque in Java","Sample Answer":"interface - implementations: LinkedList, ArrayDeque\nsupports element insertion and removal at both ends\nDeque can act as Queue as well as Stack","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is a Stack collection in Java?","Sample Answer":"LIFO = Last-In-First-Out","field5":""},
{"Category":"collections","Complexity":"","Questions":"What are the different Map implementations?","Sample Answer":"HashMap, LinkedHashMap, Treemap","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is LinkedHashMap?","Sample Answer":"Defines the iteration ordering, \nwhich is normally the order in which keys were inserted into the map (insertion-order)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the difference in sorting by LinkedHashMap and TreeMap","Sample Answer":"TreeMap - sorted according to the natural ordering of its keys\nLinkedHashMap - insertion-order","field5":""},
{"Category":"collections","Complexity":"","Questions":"How do we compare to BigDecimal objects in Java?","Sample Answer":"compareTo method. Depends if it returns -1, 0, 1","field5":""},
{"Category":"collections","Complexity":"","Questions":"If one needs a Set, how do you choose between HashSet vs. TreeSet?","Sample Answer":"At first glance, HashSet is superior in almost every way: O(1) add, remove and contains, vs. O(log(N)) for TreeSet.","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the complexity when using an array","Sample Answer":"Access element by index -> O(1)\nSearching -> O(n)\nInsertion / Deletion -> O(n)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the complexity when using an arraylist","Sample Answer":"get -> O(1)\nadd -> O(N), O(1)\ncontains -> O(N)\nremove -> O(N)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the complexity when using an linkedlist","Sample Answer":"get -> O(N)\nadd -> O(1)\ncontains -> O(N)\nremove -> O(1)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the complexity of HashSet","Sample Answer":"Add -> O(1)\ncontains -> O(1)\nremove -> O(1)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the complexity of LinkedHashSet","Sample Answer":"Add -> O(1)\ncontains -> O(1)\nremove -> O(1)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the complexity of TreeSet","Sample Answer":"Add -> O(log N)\ncontains -> O(log N)\nremove -> O(log N)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What is the complexity of using Stack / Queue","Sample Answer":"add -> O(1)\nget -> O(1)\nremove -> O(1)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the complexity of HashMap / LinkedHashMap","Sample Answer":"add -> O(1)\ncontains -> O(1)\nremove -> O(1)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What's the complexity of TreeMap","Sample Answer":"add -> O(log N)\ncontains -> O(log N)\nremove -> O(log N)","field5":""},
{"Category":"collections","Complexity":"","Questions":"What does \"clear()\" method of Collection interface do?","Sample Answer":"discard all elements of the collection","field5":""},
{"Category":"","Complexity":"","Questions":"What threadsafe collections do you know?","Sample Answer":"BlockingQueue\nArrayBlockingQueue\nPriorityBlockingDeque\nSynchronousQueue\nLinkedBlockingDeque\nConcurrentHashMap\nConcurrentSkipListMap - analogous to TreeMap\nConcurrentSkipListSet - analogous to TreeSet\nCopyOnWriteArrayList\nCopyOnWriteArraySet","field5":""},
{"Category":"collections","Complexity":"","Questions":"What does it mean for a collection to be “backed by” another? Give an example of when this property is useful.","Sample Answer":"If a collection backs another, it means that changes in one are reflected in the other and vice-versa.","field5":""}
,
{"Category":"","Complexity":"","Questions":"Which interface would you use to represent a collection \nhaving non-unique objects in their order of insertion","Sample Answer":"List / java.util.List","field5":""},
{"Category":"generics","Complexity":"","Questions":"What is the advantage of generic collection?","Sample Answer":"If we use generic class, we don't need typecasting. \nIt is typesafe and checked at compile time.","field5":""},
{"Category":"","Complexity":"","Questions":"What's the problem with following code snippet?\nclass Q<T> {\n   T mem;\n\n   public Q(T arg) {\n      mem = arg;\n   }\n}","Sample Answer":"Option a): You cannot make a static reference of type T.\nOption c) and d): You cannot instantiate the type T or T[]  using new operator.","field5":""},
{"Category":"generics","Complexity":"","Questions":"Is it possible to define or declare generic methods in an interface \nor class even if the class/interface is not generic","Sample Answer":"Yes","field5":""},
{"Category":"collections","Complexity":"","Questions":"What data structure would you choose for storing a password in Java","Sample Answer":"char[]\n\nStrings are immutable. That means once you've created the String, if another process can \ndump memory, there's no way (aside from reflection) you can get rid of the data before garbage collection kicks in.\n\nWith an array, you can explicitly wipe the data after you're done with it. \nYou can overwrite the array with anything you like, and the password won't be present anywhere \nin the system, even before garbage collection.\n\nSo yes, this is a security concern - but even using char[] only reduces the window of opportunity \nfor an attacker, and it's only for this specific type of attack.","field5":""},
{"Category":"collections","Complexity":"","Questions":"Which concept allows generic collections to interoperate with \njava code that defines collections that use raw types","Sample Answer":"type erasure","field5":""},
{"Category":"serialization","Complexity":"","Questions":"What is Serialization in Java\n>>> Explain it to Not IT guy","Sample Answer":"Converting object to sequence of bytes\n\nTo serialize an object means to convert its state to a byte stream so that the byte stream can be \nreverted back into a copy of the object. A Java object is serializable if its class or any of its \nsuperclasses implements either the java.io.Serializable interface or its subinterface, \njava.io.Externalizable.","field5":""},
{"Category":"serialization","Complexity":"","Questions":"What are the specifics about the serializable interface?","Sample Answer":"It’s marker-interface","field5":""}
,
{"Category":"serialization","Complexity":"","Questions":"Are constructors and initializers invoked by deserialization","Sample Answer":"No","field5":""},
{"Category":"serialization","Complexity":"","Questions":"Can we serialize a static field","Sample Answer":"No","field5":""},
{"Category":"","Complexity":"","Questions":"What is AutoCloseable in Java","Sample Answer":"The interface Closeable extends AutoCloseable and defines one method, close() .\nTODO CHECK IF AUTOCLOSEABLE IS NOT A MARKER INTERFACE???","field5":""},
{"Category":"files","Complexity":"","Questions":"How can we move a file using Java?","Sample Answer":"Files.move(p1, p2, StandardCopyOption.REPLACE_EXISTING)\nor\nFiles.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING)\nFiles.delete(p1);","field5":""},
{"Category":"files","Complexity":"","Questions":"How to find all roots of the default file system?","Sample Answer":"File.listRoots();\r\nFileSystems.getDefault().getRootDirectories();","field5":""},
{"Category":"files","Complexity":"","Questions":"How can we print all roots of the default file system?","Sample Answer":"FileSystem fs = FileSystems.getDefault();\nIterable<Path> roots = fs.getRootDirectories();\nfor(Path p : roots)\n   Syso(p);","field5":""},
{"Category":"design pattern","Complexity":"","Questions":"What is singleton class?","Sample Answer":"Singleton class means that any given time only one instance of the class is present, in one JVM.","field5":""},
{"Category":"design patterns","Complexity":"","Questions":"What are design patterns (in Java) ?","Sample Answer":"some coding templates which describe best practices","field5":""},
{"Category":"design patterns","Complexity":"","Questions":"What are the major groups of design patterns you know ?","Sample Answer":"- Creational\n- Structural\n- Behavioral patterns.","field5":""},
{"Category":"design patterns","Complexity":"","Questions":"Name at least one pattern of the above mentioned groups and give brief description of the problem the pattern resolves ?","Sample Answer":"Creational - Factory, Singleton , Builder etc… ; \nStructural - Adapter, Façade, Proxy, Decorator … etc. ; \nBehavioral - Command, Observer, Chain of responsibility …..etc.","field5":""}
,
{"Category":"design patterns","Complexity":"","Questions":"What is the driving factor for using the DAO pattern","Sample Answer":"Answer: To reduce code complexity in business objects\nExplanation: This is the main objective of the DAO pattern. It allows you to remove the code\nthat manages storage and retrival of data from the classes that implement business logic \nthereby reducing their complexity.","field5":""},
{"Category":"thread","Complexity":"","Questions":"How do you do multithreading in Java","Sample Answer":"implementing the Runnableinterface / extending the Thread class","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is thread?","Sample Answer":"A thread is a lightweight subprocess.\nIt is a separate path of execution.\nIt is called separate path of execution because each thread runs in a separate stack frame.","field5":""},
{"Category":"thread","Complexity":"","Questions":"How do we execute a thread?","Sample Answer":"by calling a start() method.","field5":""},
{"Category":"thread","Complexity":"","Questions":"What will happen if we call thread's start() method twice?","Sample Answer":"If we call start() to a thread twice by second call \nthe JVM throws an IllegalThreadStateException (RuntimeException)","field5":""},
{"Category":"thread","Complexity":"","Questions":"Why does Thread class have wait/notify methods","Sample Answer":"Because Thread extends Object and Object defines wait/notify","field5":""},
{"Category":"thread","Complexity":"","Questions":"What do you know about threads' interruption in Java?","Sample Answer":"void interrupt() - sets the interrupt flag to true\nin our run() method we implement a logic for how/when/if this thread allows to be interrupted","field5":""},
{"Category":"thread","Complexity":"","Questions":"What will happen if someone call interrupt() on a thread which sleeps?","Sample Answer":"It throws InterruptedException","field5":""},
{"Category":"thread","Complexity":"","Questions":"What will happen by the following code snippet?\n\n1. Thread t1 = new Thread();\n2. t1.start();\n3. t1.join();","Sample Answer":"On line 3, the current thread stops and waits until the t1 thread finishes.\nOn line 4, the t1 thread is dead.\nThis code may throw checked exception","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is a thread pool used for?","Sample Answer":"A thread pool reuses previously created threads to execute current tasks and offers a solution \nto the problem of thread cycle overhead and resource thrashing. Since the thread is already \nexisting when the request arrives, the delay introduced by thread creation is eliminated, \nmaking the application more responsive. \nJava Examples: Executors, Executor and ExecutorService","field5":""},
{"Category":"thread","Complexity":"","Questions":"What types of thread pools do you know?","Sample Answer":"- Single Thread Pool - A thread pool with only one thread. So all the submitted\ntask will be executed sequentially\nExecutorService newSingleThreadExecutor()\n\n- Cached Thread Pool: A thread pool that create as many threads it needs to\nexecute the task in parallel. The old available threads will be reused for the\nnew tasks. If a thread is not used during 60 seconds, it will be terminated\nand removed from the pool\nExecutorService newCachedThreadPool()\n\n- Fixed Thread Pool: A thread pool with a fixed number of threads. If a thread\nis not available for the task, the task is put in queue waiting for an other\ntask to ends\nExecutorService newFixedThreadPool(int threadsCount)\n\n- Scheduled Thread Pool: A thread pool made to schedule future task\r\nScheduledExecutorService newScheduledThreadPool(int threadsCount)\r\n\n- Single Thread Scheduled Pool: A thread pool with only one thread to\r\nschedule future task\r\nScheduledExecutorService newSingleThreadScheduledExecutor()","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is synchronization?","Sample Answer":"Synchronization is the capabilility of control the access of \nmultiple threads to any shared resource.\nIt is used:\n    - To prevent thread interference.\n    - To prevent consistency problem","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is boolean isAlive() method used for?","Sample Answer":"Tests if this thread is alive. A thread is alive if it has been started and has not yet died","field5":""},
{"Category":"thread","Complexity":"","Questions":"What are synchronized methods in Java ?","Sample Answer":"Synchronized methods enable a simple strategy for preventing \nthread interference a d memory consistency errors - \nIf an object is visible to more than one thread all reads or writes \nto the objects variables are done through synchronized methods.","field5":""},
{"Category":"thread","Complexity":"","Questions":"Can we declare an abstract method synchronized?","Sample Answer":"No. Abstract methods (in abstract classes or interfaces) cannot be declared synchronized.","field5":""},
{"Category":"thread","Complexity":"","Questions":"Does \"sleep()\" method release an lock","Sample Answer":"If you call the sleep() method of a thread, the thread does not release the lock and it holds \non to the lock\nYou can use the join() method to wait for another thread to terminate","field5":""},
{"Category":"thread","Complexity":"","Questions":"What are the states of a thread?","Sample Answer":"Enum Thread.State.NEW\n                                RUNNABLE\n                                RUNNING\n                                BLOCKED\n                                WAITING\n                                TIMED_WAITING\n                                TERMINATED","field5":""},
{"Category":"","Complexity":"","Questions":"Where can we put \"synchronized\" in Java?","Sample Answer":"Instance methods\nStatic methods\nCode blocks inside instance methods\nCode blocks inside static methods","field5":""},
{"Category":"thread","Complexity":"","Questions":"How can we synchronize an object in Java?","Sample Answer":"","field5":""},
{"Category":"thread","Complexity":"","Questions":"Can Java object be locked down \nfor exclusive use by a given thread?","Sample Answer":"Yes. You can lock an object by putting it in a \"synchronized\" block.\nThe locked object is inaccessible to any thread other than the one that explicitly claimed it.","field5":""},
{"Category":"","Complexity":"","Questions":"Why are methods like stop(), suspend() and resume() depricated?","Sample Answer":"stop() - Stopping a thread causes it to unlock all the\nmonitors that it has locked. If any of the objects previously protected by these\nmonitors were in an inconsistent state, the damaged objects become visible\nto other threads, potentially resulting in arbitrary behavior\n\nsuspend() / resume() - If the target thread\nholds a lock on the monitor protecting a critical system resource when it is\nsuspended, no thread can access this resource until the target thread is\nresumed. If the thread that would resume the target thread attempts to lock\nthis monitor prior to calling resume, deadlock results","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is deadlock?","Sample Answer":"Deadlock is a situation when two threads are waiting on each other to release a resource.\nEach thread waiting for a resource which is held by the other waiting thread.","field5":""},
{"Category":"","Complexity":"","Questions":"Example for deadlock?","Sample Answer":"2 treads hold the lock on different resoursec of an object in differerent order","field5":""},
{"Category":"thread","Complexity":"","Questions":"How do you avoid a deadlock?","Sample Answer":"Don't use locks.\nIf you must, keep your locks local. Global locks can be really tricky.\nDo as little as possible when you hold the lock.\nUse stripes to only lock segments of your data.\nPrefer Immutable types. ...\nThink in design time about deadlocks\nDocument the lock specifics\n\ntryLock() - returns boolean // lock returns void","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is livelock?","Sample Answer":"when two or more threads actively try to acquire a set of locks","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is race conditioning?","Sample Answer":"an undesirable result that occurs when two tasks which should be completed sequentially \nare completed at the same time","field5":""},
{"Category":"","Complexity":"","Questions":"What is starvation?","Sample Answer":"Low priorities threads don't be executed","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is Lock interface in Java?","Sample Answer":"A java.util.concurrent.locks.Lock is a thread synchronization mechanism just like \nsynchronized blocks. A Lock is, however, more flexible and more sophisticated than a \nsynchronized block. Since Lock is an interface, you need to use one of its implementations to \nuse a Lock in your applications. ReentrantLock is one such implementation of Lock interface.","field5":""},
{"Category":"thread","Complexity":"","Questions":"Parallel vs concurrent vs Asynchronous execution \n- Compare the two approaches for execution in the same time","Sample Answer":"- Parallel programs distribute their tasks to multiple processors, \n  that actively work on all of them simultaneously.\n- Concurrent programs handle tasks that are all in progress at the same time, but it is only \n  necessary to work briefly and separately on each task, so the work can be interleaved in \n  whatever order the tasks require.\n- An asynchronous program dispatches tasks to devices that can take care of themselves, \nleaving the program free do something else until it receives a signal that the results are finished.","field5":""},
{"Category":"thread","Complexity":"","Questions":"Which are the Threadsafe types?","Sample Answer":"AtomicBoolean – atomically updatable Boolean value\nAtomicInteger – atomically updatable int value, inherits from the number class\nAtomicIntegerArray – an int array in which elements can be updated atomically\nAtomicLong\nAtomicLongArray\nAtomicReference<V> - an atomically updatable object reference of type V\nAtomicReferenceArray<E> - an atomically updatable array that can hold object references of type E \n                                              (E refers to be base type of elements)","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"Which one is better Lock object or synchronized block?","Sample Answer":"Lock object better to use than the synchronized block. Locks also support the wait/notify mechanism.","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is the benefit of using synchronized keyword over Lock?","Sample Answer":"The advantage of using the synchronized keyword (implicit locking) is that you don’t have to\nremember to release the lock in a finally block since, at the end of the synchronized block \n(or method), code will be generated to automatically release the lock.\nAlthough this is a useful feature, there are some situations where you may need to control the \nrelease of the lock manually (to release it other than at the end of that block) \nand the Lock objects provide this flexibility. \nHowever it is your responsibility to ensure that you release the lock in a finally block while using Lock objects","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"How can we force a thread to wait the execution of other thread?","Sample Answer":"If you want to make a thread wait for another thread you can ask it to wait for the wait object \nusing the wait() method. A thread remains in the wait state until some other \nthread calls notify() or notifyAll()","field5":""},
{"Category":"thread","Complexity":"","Questions":"Is java.concurrent.locks.Lock object released automatically when\nan exception occur.","Sample Answer":"If a synchronized method throws an exception in its execution the lock acquired by the method \ndue to the usage of synchronized keyword is released automatically. The Java exception mechanism\nis integrated with the Java synchronization model, so that locks are released if synchronized\nstatements and invocation of synchronized method complete abruptly. This is not applied to\njava.concurrent.locks.Lock. These locks must be released by the programmer explicitly and the\nrecommended pattern of usage is to be released in finally block.\nNote: Only AtomicInteger and AtomicLong extend from Number class. \n           All other classes in java.util.concurrent.atomic inherit directly from Object class.","field5":""},
{"Category":"thread","Complexity":"","Questions":"What will happen if we call notify/notifyAll without acquiring \nthe relevant lock?","Sample Answer":"Call wait and notify/notifyAll only after acquiring the relevant lock (иначе IllegalMonitorException)","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What is the difference between notify() and notifyAll() methods?","Sample Answer":"notify() wakes up one thread waiting for the lock (the first thread that called wait() on that lock)\nnotifyAll() wakes up all threads waiting for the Lock. The JVM selects one of the threads from \nthe list of threads waiting for the lock and wakes that thread up. ","field5":""},
{"Category":"thread","Complexity":"","Questions":"Is it possible to separate the locks for read and write operations.","Sample Answer":"The ReadWriteLock interface (which extends from the Lock interface) specifies a lock that \nprovides separate locks for read-only and write access. You can use the readLock() \nand writeLock() methods to get instances of read and write locks.\nThe ReentrantReadWriteLock class implements the ReadWriteLock interface.","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is java.util.concurrent.Exchanger<V> used for?","Sample Answer":"Exchanger – exchanging data between two threads. It waits until both the threads have \ncalled the exchange() method. When that’s happen the Exchanger object actually \nexchanges the data shared by the threads with each other","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What is java.util.concurrent.CyclicBarrier used for?","Sample Answer":"There are many situations where threads may need to wait at a predefined \nexecution point until all other threads reach that point.\nCyclicBarrier enables threads to wait at a predefined execution point","field5":""},
{"Category":"thread","Complexity":"","Questions":"What's the purpose of java.util.concurrent.Phaser?","Sample Answer":"Phaser is used to support a synchronization barrier.\nuseful feature when few independent threads have to work in phases to complete a task. \nSo, a synchronization point is needed for the threads to complete other part of the task and \ndo sync-up before advancing to complete the next part of the task.","field5":""},
{"Category":"","Complexity":"","Questions":"What is Semaphore in terms of threads?","Sample Answer":"Semaphore controls access to one or more shared resources.  \nSemaphore – acquire() , release() -> resources from Semaphore","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What is BlockingQueue?","Sample Answer":"BlockingQueue – This interface extends the Queue interface\nA Queue that additionally supports operations that wait for the queue to become non-empty when\nretrieving an element, and wait for space to become available in the queue when storing an element.","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What is ArrayBlockingQueue?","Sample Answer":"ArrayBlockingQueue – implements BlockingQueue and contains elements of type Delayed. \nAn element can be retrieved from this queue only its delay period. ","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What is WeakHashMap and when to use it?","Sample Answer":"WeakHashMap is used for more efficient memory cache.\nExample: If we create a HashMap which have big image objects as Values and image names \nas Keys it will be a bad idea, because the value object may occupy a lot of memory.\nThey’ll never be reclaimed from the hashMap object by a GC process, even when they are \nnot in use in our application anymore.\nIf we want a Map implementation that allows GC to automatically delete unused objects \nwe can use WeakHashMap.\n\nCode Example:\nWeakHashMap<UniqueImageName, BigImage> map = new WeakHashMap<>();\nBigImage bigImage = new BigImage(\"image_id\");\nUniqueImageName imageName = new UniqueImageName(\"name_of_big_image\");\nmap.put(imageName, bigImage); \nimageName = null;\n\nNote that when we set the imageName reference(the key value) to be null, there are no more \nreferences pointing to the bigImage object and this entry will be deleted from memory \nby the next GC process.","field5":""}
,
{"Category":"thread","Complexity":"","Questions":"What will happen If we call start() or setDaemon() methods of \na thread, that is already started","Sample Answer":"it will throw IllegalThreadStateException (runtime)","field5":""},
{"Category":"garbage \ncollection","Complexity":"","Questions":"What is Garbage Collection?","Sample Answer":"Garbage collection is a process of reclaiming the runtime unused objects.\nIt is performed for memory management.","field5":""},
{"Category":"thread","Complexity":"","Questions":"What is a daemon thread?","Sample Answer":"A daemon thread is a thread that does not prevent the JVM from exiting when the program \nfinishes but the thread is still running. An example for a daemon thread is the garbage collection.\r\n\r\nYou can use the setDaemon(boolean) method to change the Thread daemon properties before the thread starts.","field5":""},
{"Category":"garbage collection","Complexity":"","Questions":"What is System.gc();","Sample Answer":"gc() is a daemon thread.\ngc() method is defined in System class that is used to send request to JVM to perform garbage collection.","field5":""},
{"Category":"garbage \ncollection","Complexity":"","Questions":"Types of garbage collection","Sample Answer":"Serial GC\nParallel GC\nParallel Old GC (Parallel Compacting GC)\nConcurrent Mark & Sweep GC (or \"CMS\")\nGarbage First (G1) GC","field5":""},
{"Category":"reflection","Complexity":"","Questions":"What is reflection?","Sample Answer":"Reflection is the process of examining or modifying the runtime behaviour of a class at runtime.\nIt is used in:\n- IDE (Integreted Development Environment) e.g. Eclipse, MyEclipse, NetBeans.\n- Debugger\n- Test Tools etc.","field5":""},
{"Category":"reflection","Complexity":"","Questions":"Practical use cases of reflection","Sample Answer":"1) Annotation-based serialization libraries often map class fields to JSON keys or XML elements (using annotations). \n    These libraries need reflection to inspect those fields and their annotations and also to access the values \n     during serialization.\n2) Model-View-Controller frameworks call controller methods based on routing rules. These frameworks \n    must use reflection to find a method corresponding to an action name, check that its signature conforms to \n    what the framework expects (e.g. takes a Request object, returns a Response), and finally, invoke the method.\n3) Dependency injection frameworks lean heavily on reflection. They use it to instantiate arbitrary beans for \n    injection, check fields for annotations such as @Inject to discover if they require injection of a bean, \n    and also to set those values.\n4) Object-relational mappers such as Hibernate use reflection to map database columns to fields or \n    getter/setter pairs of a class, and can go as far as to infer table and column names by reading class \n    and getter names, respectively.","field5":"Class cls = Class.forName(\"MyClass\");\r\nMyClass obj = (MyClass) cls.newInstance();\r\n\r\nMyClass2 obj1 = new MyClass2();\r\nMyClass2 obj2 = (MyClass2) obj1.clone();"},
{"Category":"algorithms","Complexity":"","Questions":"Do you know any algorithms? Have you used any?","Sample Answer":"Searching algorithms - ...\nSorting algorithms - ...","field5":""},
{"Category":"algorithms","Complexity":"","Questions":"Give examples for some algorithms for searching / sorting","Sample Answer":"","field5":""},
{"Category":"algorithms","Complexity":"","Questions":"Can you describe a Graph. \nWhat are its applications and how it's implemented?","Sample Answer":"- A graph is a data structure for storing connected data like a network of people on a social media platform.\n- A graph consists of vertices and edges. A vertex represents the entity (for example, people) and an edge \nrepresents the relationship between entities (for example, a person’s friendships).\n- Ways to represent: \n    - An adjacency matrix is a square matrix with dimensions equivalent to the number of vertices in the graph. \n      The elements of the matrix typically have values ‘0’ or ‘1’. A value of ‘1’ indicates adjacency between the \n      vertices in the row and column and a value of ‘0’ otherwise.","field5":""}
,
{"Category":"algorithms","Complexity":"","Questions":"What is Binary Sorted Tree? \nHave you used it?\nWhat problems have you solved with it?","Sample Answer":"Binary search tree = ordered tree = sorted binary tree\nallow fast lookup, addition and removal of items, and can be used to implement either dynamic sets of items, \nor lookup tables that allow finding an item by its key (e.g., finding the phone number of a person by name).\n\ninary search trees keep their keys in sorted order, so that lookup and other operations can use the principle of \nbinary search: when looking for a key in a tree (or a place to insert a new key), they traverse the tree from root \nto leaf, making comparisons to keys stored in the nodes of the tree and deciding, on the basis of the comparison, \nto continue searching in the left or right subtrees.","field5":""},
{"Category":"algorithms","Complexity":"","Questions":"What is the algorithmic complexity for search an element in array?","Sample Answer":"Depends on the approach you use\n- Linear search\n- Binary search","field5":""},
{"Category":"algorithms","Complexity":"","Questions":"What is the algorithmic complexity of 2 nested for loops?\nfor(int i = 0; i < 1000; i++) {\n     for(int j = 0; j < 100000; j++) {\n     }\n}","Sample Answer":"O(n^2)","field5":""},
{"Category":"algorithms","Complexity":"","Questions":"Code a program which can sum the numbers from 1 to 100: 1+2+3+.....+100.","Sample Answer":"(100 * 101) / 2\n\nvar sum = 0;\nfor(var i=1; i<101; i++) { sum+=i;} \nconsole.log(sum);","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (JSE/SE/SSE): Модифицирайте следния код на Java така, че променлива да бъде immutable:","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø int year = 2018;","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (JSE/SE/SSE): Каква е разликата между класовете StringBuilder и StringBuffer в Java?","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (JSE/SE/SSE): Какви системи за Version control познавате?","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (SE/SSE): Какви са концептуалните разлики между git и SVN?","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (SE/SSE): С какви IDE-та имате опит?","Sample Answer":"","field5":""}
,
{"Category":"","Complexity":"","Questions":"","Sample Answer":"","field5":""},
{"Category":"","Complexity":"","Questions":"Ø (SE/SSE): Explain what is a side-effect.","Sample Answer":"","field5":""}

]
db.Java.insert(document);
