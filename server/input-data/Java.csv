Category,Complexity,Questions,Sample Answer,
java - common,,What is the difference between JDK and JRE?,"JRE - Java Runtime Environment - java applications run on it; 
        - only virtual machine. It can only execute java programs

JDK - Java Development Kit - fully featured software development kit for Java
        - includes JRE, compilers and tools in it. 
        - allow you to develop java programs. Incl. JVM, compiler, other helping tools",
java - common,,What is JVM?,"A program which executes other programs
Two primary functions
   - Ensure platform independence
   - Manage & optimize program memory",
java - common,,.jar vs .ear vs .war,".jar - EJB modules, which contains EJB and EJB deployment descriptor
.war - Web modules which contain Servlet class files, JSP files, supporting files, GIF & HTML files
.ear - .jar & .war files are packaged as JAR file with .ear extension & deployed into App Server",
java - common,,What is bytecode?,"- Code compiled once, which could be run through a VM instead of computer’s processor directly.
- So source code could be run on any platform (once it has been compiled and run through the VM)
- Compiled format of Java program
- Represented through .class files",
java - common,,What is classloader?,"a subsystem of JVM that is used to load classes and interfaces. 
There are many types of classloaders  
e.g. Bootstrap classloader, Extension classloader, System classloader, Plugin classloader etc.
=======================================================================
The Java Classloader is the part of the JRE that loads classes on demand (lazy loading) 
into the JVM (Java Virtual Machine). 
Classes may be loaded from the local file system, a remote file system, or even the web.

When the JVM is started, three class loaders are used: 
1. Bootstrap Classloader: Loads core java API file rt.jar from folder. 
2. Extension Classloader: Loads jar files from folder. 
3. System/Application Classloader: Loads jar files from path specified in the CLASSPATH env. variable.",
common,,SOLID principles,"S - single responsibility
O - open/close - open for EXTENSION, but closed for MODIFICATION
L - Liskov Substitution - Objects in a program should be replaceable with instances 
                                      of their subtypes without altering the correctness of that program
I - Interface segregation - Many client-specific interfaces are better than one general-purpose interface
D - dependency inversion - One should depend upon abstractions, not concretions
                                          - High-level modules should not depend on low-level modules. 
                                            Both should depend on abstractions.
                                          - Abstractions should not depend on details. Details should depend on abstractions.",
common,,What are the steps in problem solving with Java?,"Reproduce the problem
Debug the current process, which shows the problem
Find the problem
Analyse it
Search for different approaches, which can fix the problem
Implement a solution
Test the fixed code
If everything works fine document the change, if there is anything special.
Test also other processes, which depend of the changed one.",
java - common,,What's the main difference between C++ and Java,"JVM, platform independence, Java has garbage collection
C++ -> procedural & OOP, Java -> pure OOP",
java - common,,Java SE vs Java EE,"Java SE - Standard Edition. 
This is the core Java programming platform. It contains all of the libraries and APIs 
that any Java programmer should learn (java.lang, java.io, java.math, java.net, java.util, etc...).
Java EE
for very large scale apps or distributed systems. 
Built on top of Java SE, it provides libraries for database access (JDBC, JPA), 
remote method invocation (RMI), messaging (JMS), web services, XML processing, 
and defines standard APIs for Enterprise JavaBeans, servlets, portlets, Java Server Pages, etc...",
java - common,,New features in java 7,"Diamond operator ( Generics)
Using String in switch statement
Automatic resource management (try with resources)
Multicatch block
Numeric literals with underscore (int thousand =  1_000;)
Java.NIO 2.0",
java - common,,New features in java 8,"forEach method in Iterable interface
default and static methods in Interfaces
java.time / java.time.format / java.time.zone
Functional interface - interface with exactly one abstract method
                                - we don’t have to mark the interface as @FunctionalInterface explicitly
Lambda - allow us to create anonymous classes of functional interfaces easily
Java Stream API for Bulk Data Operations on Collections",
java - common,,New features in java 9,"Modules
jlink tool - allow us to create a minimal runtime environment, containing just those modules 
                necessary to run your app (we create a minimal runtime image optimized for our app)
JShell - an interactive Java PERL
Improved Javadoc
Multi-release JARs
Collection - factory methods
Stream API improvements
Private methods in interfaces
HTTP/2 - new ways of making HTTP calls",
java - common,,New features in java 10,Local variable type inference - VAR,
java - common,,New features in java 11,"Enhancements to various of Java classes 
Type inference - Consumer<String> printer = (var s) -> System.out.println(s); 
Remove Java EE and CORBA Modules (depr. Java 9)",
common,,Do you know any functional languages?,"Haskell, Erlang, Lisp",
common,,Do you know any logical languages?,Prolog,
common,,Authentication vs. authorization,"Authentication: The user login credentials are passed to an authenticate API (on the server). 
On the server side validation of the credentials happens and a JSON Web Token (JWT) is returned. 
JWT is a JSON object that has some information or attributes about the current user.  
Once the JWT is given to the client, the client or the user will be identified with that JWT.

Authorization: After logging in successfully, the authenticated or genuine user 
does not have access to everything. The user is not authorized to access someone else’s data,  
he/she is authorized to access some data.",
common,,Procedural vs. OOP ,"Procedural => a set of procedures which invoke each other
Procedural => hard to reuse, no abstract data structures",
common,,Difference between compiled vs. interpreted languages? ,"- With a compiled language, code you enter is reduced to a set of machine-specific instructions 
  before being saved as an executable file. 
- With interpreted languages, the code is saved in the same format that you entered. ",
common,,What is a variable scope?,"validity, visibillity area
global vs. local",
common,,What is method's call stack,"List of methods which was called is known as the call stack
when a method calls a method, the new method is put on top of the call stack
when the tp method finishes, it's removed from call stack
method in the lower level finishes when all the methods on top of it are finished",
common,,Heap vs. stack vs. perm space,"Heap space: Store all live objects
Stack space: Store references to the object for variable in method call or variable instantiation
Perm space: Store loaded classes information",
common,,Early vs. late binding,"early (or static) binding refers to compile time binding 
late (or dynamic) binding refers to runtime binding (for example when you use reflection).",
,,What defines the method signature in Java?,"method name and the number, type and order of its parameters. 
Return types and thrown exceptions are not considered to be a part of the method signature",
,,What if I write static public void instead of public static void?,Program compiles and runs properly.,
dates,,"Is the following snippet ok?
Date d = new Date();
DateFormat df = new DateFormat(DateFormat.Long);
System.out.println(dt.format(d));","Will not compile, bacause DateFormat is an abstract class. => DateFormat.getDateInstanace();",
string,,What are the two ways of initializing a string in Java ?,"Candidate to explain the difference between creating the string with String hello = ""hello""; 
and String hello = new String(""hello""); ? 
Which one is prefered ? 
What are consequeces when the string is created in the constant pool instead of the jvm heap ?",
string,,What is the meaning of immutable in terms of String?,"The simple meaning of immutable is unmodifiable or unchangeable.
Once string object has been created, its value can't be changed.",
string,,Why string objects are immutable in java?,"Because java uses the concept of string literal. Suppose there are 5 reference variables,
all referes to one object ""sachin"".
If one reference variable changes the value of the object, it will be affected to all the reference variables.
That is why string objects are immutable in java.",
string,,"How many objects will be created in the following code?
 
 String s1=""Welcome"";
 String s2=""Welcome"";
 String s3=""Welcome"";",Only one object.,
string,,What is the basic difference between string and stringbuffer object?,String is an immutable object. StringBuffer is a mutable object.,
string,,What's the difference between StringBuilder and StringBuffer,"StringBuffer is synchronized, StringBuilder is not",
string,,"What will happen from the following code:
String s1 = ""Welcom!""
s1.split(""\s"")","It will not compile, it should be split(""\\s"")
\\s - stands for whitespace",
constructor,,What is the purpose of default constructor?,"The default constructor provides the default values to the objects.
The java compiler creates a default constructor only if there is no constructor in the class",
constructor,,Does constructor return any value?,"yes, that is current instance 
(You cannot use return type yet it returns a value)",
,,"Does an Enum has constructor. If yes, are there something special?","Yes. The constructor is always private. You cannot make it public or protected.
If an enum type has no constructor declarations, then a private constructor without 
params is provided automatically",
static,,What can be static in Java,"Variable
Method
Block
Nested class",
static,,What is static variable?,"static variable is used to refer the common property of all objects 
(that is not unique for each object) 
e.g. company name of employees, college name of students etc.
 
static variable gets memory only once in class area at the time of class loading.",
static,,What is static method?,"A static method belongs to the class rather than object of a class.
A static method can be invoked without the need for creating an instance of a class.
static method can access static data member and can change the value of it.",
static,,Can you declare an interface method static?,"No, because methods of an interface is abstract by default, and static and abstract keywords can't be used together.
No, until java 8",
static,,What are static initializers and when would you use them?,"A static initializer gives you the opportunity to run code during the initial loading of a class and 
it guarantees that this code will only run once and will finish running before your class 
can be accessed in any way.

They are useful for performing initialization of complex static objects or to register a type with 
a static registry, as JDBC drivers do.

Suppose you want to create a static, immutable Map containing some feature flags. 
Java doesn’t have a good one-liner for initializing maps, so you can use static initializers instead:
public static final Map<String, Boolean> FEATURE_FLAGS;
        static {
            Map<String, Boolean> flags = new HashMap<>();
            flags.put(""frustrate-users"", false);
            flags.put(""reticulate-splines"", true);
            flags.put(...);
            FEATURE_FLAGS = Collections.unmodifiableMap(flags);
        }
Within the same class, you can repeat this pattern of declaring a static field and immediately 
initializing it, since multiple static initializers are allowed.",
final,,Can we intialize blank final variable?,"Yes, only in constructor if it is non-static. 
If it is static blank final variable, it can be initialized only in the static block.",
final,,What can be final in Java?,"Variable cannot be changed
Method cannot be overridden
Class cannot be subclassed",
final,,"What is the difference between final, finally and finalize?","final - it's keyword - class, variable, method 
finally - it's block of code - It's used to place important code, which will be executed whethever exception is handled ot not
finalize - It's a method - perform clean up processing just before object is garbage collected",
basic OOP,,What is the difference between Class and object in Java?,,
basic OOP,,What is the difference between this vs. super in Java,current vs. base instance,
enum,,What is typical for enum?,"Enum is typesafe.
 - Can declare a pricate constructor
 - Implicitly implement Comparable
 - Can implement an interface",
equals,," ""=="" vs. equals",,
hashcode,,What is hashcode?,"hashCode() returns an integer value, generated by a hashing algorithm
Objects that are equal (according to their equals()) must return the same hash code. It’s not required for different objects to return different hash codes.

The general contract of hashCode() states:

- Whenever it is invoked on the same object more than once during an execution of a Java application, 
  hashCode() must consistently return the same value, provided no information used in equals 
   comparisons on the object is modified. This value needs not remain consistent from one execution 
   of an application to another execution of the same application
- If two objects are equal according to the equals(Object) method, then calling the hashCode() 
  method on each of the two objects must produce the same value
- It is not required that if two objects are unequal according to the equals(java.lang.Object) method, 
  then calling the hashCode method on each of the two objects must produce distinct integer results. 
  However, developers should be aware that producing distinct integer results for unequal 
  objects improves the performance of hash tables",
hashcode,,How can you solve the problem with collisions by HashMap?,by overriding hashcode and equals methods,
hashcode/equals,,Is there something common between hashcode and equals?,"If you override the one of them, you have to override the other also.",
encapsulation,,What is encapsulation?,,
encapsulation,,Can we declare more than one public class in a file?,No,
encapsulation,,Is it possible for a top level class to be private?,"No
Only public, abstract, and final modifiers are permitted for an outer class; 
using private, protected, or static will result in a compiler error.",
encapsulation,,Can you access the private method from outside the class?,"Yes, by changing the runtime behaviour of a class if the class is not secured.",
encapsulation,,"Where is ""reason"" visible?
class OuterWorld {
   public InnerPeace i = new InnerPeace();
   private class InnerPeace {
       private String reason = ""none"";
   }
}",reason is accessible in InnerPeace and in OuterWorld,
polymorphism,,What is polymorphism?,"Polymorphism is the ability of an object to take on many forms. The most common use of 
polymorphism in OOP occurs when a parent class reference is used to refer to a child class object. 
Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an 
overridden method is resolved at runtime rather than compile-time.",
polymorphism,,What is static and dynamic binding ?,"1. Compile time polymorphism - a.k.a. static binding or early binding. 
Object binds with it's functionality at compile time. Method overloading - method is selected at compiletime. 
2. Dynamic / late / runtime binding - Runtime polymorphism is achieved by method overriding. 
Object is bound to it's functionality at runtime.",
inheritance,,Are you familiar with the Diamond problem?,"Yes, 1 class inherited from 2 parent classes, which have method(1 or more) with the same signature (C++)",
inheritance,,Are constructors inherited?,"In simple words, a constructor cannot be inherited, since in subclasses it has a different name (the name of the subclass).",
inheritance,,What is multiple inheritance. Is it supported by Java?,,
inheritance,,Is the following code snippet ok?,"interface T1 {
     int VALUE = 1;
     void m1();
}

interface T2 {
    int VALUE = 2;
}

class TestClass implements T1, T2 {
    public void m1 () { }
}

It's nothing wrong with this code. 
//If we refer them, then it will fail. We have to cast explicitly",
inheritance,,Can you extend an enum?,"No. It's implicitly final, so you cannot extend it.",
inheritance,,Can an enum implement an interface?,Yes,
abstract,,What is abstraction?,"Abstraction is a process of hiding the implementation details 
and showing only functionality to the user.
Abstraction lets you focus on what the object does instead of how it does it.",
abstract,,Difference between abstract class and interface,"Interface - only unimplemented methods
Abstract class - unimplemented + implemented methods
Always when possible -> Interface (can inherit only from 1 class, but implement more than 1 interface)",
abstract,,Can we have a constructor in abstract classes ?,YES,
abstract,,Can there be any abstract method without abstract class?,No,
abstract,,Can you use abstract and final both with a method?,"No, because abstract method needs to be overridden whereas you can't override final method.",
abstraction,,"""instanceof"" - purpose. Give example for its usage",,
abstract,,"Which line will fail the compilation?

1. class A {
2.  public static void main(String[] args){
3.   A a = new A();
4.   B a = new B();
5.   a = b;
6.   b = a;
7.   a = (B)b;
8.   b = (B)a;
9.  }
10.}
class B extends A {}","Line 6 => b = a;
Explanation: because ‘a’ is declared of class A and ‘B’ which is subclass of A. So an explicit cast is needed",
abstract,,"When designing an abstract class, why should you avoid calling abstract methods inside its constructor?","This is a problem of initialization order. 
The subclass constructor will not have had a chance to run yet and there is no way to force it to run it before the parent class.",
nested/local classes,,"Which variables of the encapsulating class an inner class access 
if the inner class is defined in an instance of the encapsulating class?","All static variables
All final instance variables
All automatic variables
All final automatic variables",
nested/local classes,,Is it possible to declare a nested class as static?,Yes,
nested/local classes,,Is it allowed for anonymous inner class to extend an abstract class?,"Yes

abstract class SomeClass {
   public abstract void m1();
}
public class TestClass {
   public SomeClass getSomeClass() {
       return new SomeClass() { public void m1() {} };
   }
}",
nested/local classes,,"Is it allowed for a static nested class to contain non-static 
member variables?",Yes,
nested/local classes,,What's the difference between inner class and static nested class?,"Inner class – is a nested class that is not explicitly/implicitly declared static 
Static nested class – every class whose declaration is within the body of other class/interface
//a class declared within an interface is implicitly static",
nested/local classes,,Can we define an Enum inside constructor or method?,No,
nested/local classes,,Can we declare a method within the main method?,Class created inside the main methods is final,
nested/local classes,,Can we define an anonymous class inside a static method,Yes,
nested/local classes,,Can we declare an interface within another interface or class,Yes. Such interfaces are known as nested interfaces,
obj interaction,,What is composition?,Holding the reference of the other class within some other class is known as composition.,
obj interaction,,Difference between composition and aggregation,"Composition - the components cannot exist without the base class,
Aggregation - can",
obj interaction,,What is a dependency?,"Dependency is a weaker form of relationship and in code terms 
indicates that a class uses another by parameter or return type.
Dependency is a form of association.",
obj interaction,,"What is the difference between Strong, Soft, and Weak References?","Strong reference:
Any object which has a strong reference pointing to it is not eligible for GC(garbage collector).
The Strong reference is the most commonly used type of Reference. 

Example: Integer x = 1; //The variable 'X' has a strong reference to an Integer object with value 1.

Soft reference:
Any object which has a soft reference pointing to it is eligible for GC(garbage collector), 
but will be collected only when JVM absolutely needs memory.
Example:
Integer x = 1;  
SoftReference<Integer> soft = new SoftReference<Integer>(x); 
x = null;

The X object has a strong reference pointing to it. Next, we are wrapping 'X' strong reference 
into a soft reference. After making that strong reference null, a X object is eligible for GC but 
will be collected only when JVM absolutely needs memory.

Weak Reference:
The objects that are referenced only by weak references are garbage collected eagerly. The GC won’t wait until it needs memory in that case.
Example:
Integer x = 1;  
WeakReference<Integer> weak = new WeakReference<Integer>(x); 
x = null;

When we made a 'X' reference null, the 'X' object will be garbage collected in the next GC cycle, 
as there is no other strong reference pointing to it.",
override,,What is method overriding?,"If a subclass provides a specific implementation of a method that is already provided by its parent class, 
it is known as Method Overriding. 
It is used for runtime polymorphism and to provide the specific implementation of the method",
override,,Can we override private or static methods of a class ?,NO. Method hiding happens.,
override,,Can we override method by just changing the access specifier ?,NO,
override,,Can we change the exception in throws clause by overriding?,"Yes, but only with more concrete one (smaller)",
override,,Can we change the accessibility of a method by overriding,No. Оverriding method cannot make the overridden method more private,
overload,,What is method overloading?,"If a class have multiple methods by same name but different parameters
It increases the readability of the program.",
overload,,"Why method overloading is not possible by changing
the return type in java?","Because of ambiguity.
Normally no, but there are special cases when this is possible - the following conditions must be
satisfied - return type of both methods are not primitive; there is a parent/child relationship in the
return types of both methods; method of parent class returns object of parent class and method 
of child class returns object of child class. - Candidate to give simple code example.",
,,"Nested classes can be static or non-static (also called an inner class). 
How do you decide which to use? 
Does it matter?","The key difference between is that inner classes have full access to the fields and methods 
of the enclosing class. This can be convenient for event handlers, but comes at a cost: every 
instance of an inner class retains and requires a reference to its enclosing class.",
casting,,When can an object reference be cast to an interface reference?,An object reference can be cast to an interface reference when the object implements the referenced interface.,
casting,,What is upcasting and downcasting ?,"1. Upcasting - automatic and implicit - candidate to give examples - it's safe
2. Downcasting - explicit - candidate to give example - it's not safe",
exceptions,,What are the two basic kind of exceptions in Java ?,Checked - compile time and Unchecked - runtime.,
exceptions,,What is the base class for Error and Exception?,Throwable,
exceptions,,"Is the following snippet going to compile?
String s = null;
switch(s) {
}","Yes, but it will throw a NullPointerException",
exceptions,,What is stack trace?,"It contains detailed information about the exception
Consist of: full name of the exception + message of the exception",
exceptions,,What's the difference between throw and throws?,,
exceptions,,"What is difference between 
Checked Exception and Unchecked Exception?","1)Checked Exception - The classes that extend Throwable class except RuntimeException and Error 
are known as checked exceptions 
e.g.IOException,SQLException etc. Checked exceptions are checked at compile-time.
 
 2)Unchecked Exception - The classes that extend RuntimeException are known as unchecked exceptions 
e.g. ArithmeticException,NullPointerException etc.  Unchecked exceptions are not checked at compile-time.",
exceptions,,What is exception propagation?," An exception is first thrown from the top of the stack and if it is not caught, 
it drops down the call stack to the previous method",
exceptions,,What's Java multicatch block. Are there any limitations?,"possible since Java 7
if all the exceptions belong to the same class hierarchy, you can simply catch that base exception type.
Also note that you cannot catch both ExceptionA and ExceptionB in the same block if ExceptionB is inherited, either directly or indirectly, from ExceptionA. The compiler will complain:
Alternatives in a multi-catch statement cannot be related by subclassing Alternative ExceptionB is a subclass of alternative ExceptionA",
exceptions,,"1. public interface Xyz {
2.   void abc() throws IOException
3. }
4.
5. public interface Pqr {
6. void abc() throws FileNotFoundException
7. }
8.
9.  public class Implementation implements Xyz, Pqr {
10.   public void abc() throws FileNotFoundException();
11.}","Compile exception line 10, because FileNotFoundException is a subtype of IOException. 
So abc() does not throws IOException.",
exceptions,,"Is a finally block executed when an exception is thrown from 
a try block that does not have a catch block, and if so, when?",A finally block is executed even if an exception is thrown or propagated to the calling code block.,
,,In what order are Resources closed? - try with resources,"in reverse order of their creation
//catch and finally blocks are executed after the resource opened in try-with-resources is closed.
//Resources are closed at the end of the try block even if try block throws an exception",
collections,,Do you know any data structures?,Collections Framework,
collections,,What is the difference between List and Set?,List can contain duplicate elements whereas Set contains only unique elements.,
collections,,Which are the implementation of List interface in Java?,"ArrayList, LinkedList",
collections,,"Do you know what's the purpose of the following Arrays/Collections methods:
ceiling
floor
higher
lower","E ceiling(E e) – returns the least element greater than or equal to the given element, or null if there is no such element.
E floor(E e) – returns the greatest element in this set less than or equal to the element or null
E higher(E e) – returns the least element in this set strictly greater than the given element or null
E lower(E e) – returns the greatest element in this set strictly less than the given elemen or null",
,,What is the difference between compare() and compareTo() methods?,"Comparable interface -> compareTo()
Comparator -> compare()",
collections,,What are the Set implementations in Java,"HahsSet, 
LinkedHashSet, 
TreeSet (implements SortedSet, NavigableSet)",
,,"What is the requirement for our objects in order to 
insert them in a TreeSet?","TreeSet – The foremost requirement of a TreeSet is that not only the elements must implement 
Comparable interface ( compareTo() ) but they must also be mutually comparable 
(mutually – не може на единият клас compareTo да е String, на другия int )
ако искаме treeSet.add(new Person(“someName”)) -> Person трябва да имплементира Comparable",
collections,,What is the difference between HashSet and TreeSet?,HashSet maintains no order whereas TreeSet maintains ascending order.,
collections,,What is the difference between HashMap and TreeMap?,,
collections,,What is the difference between HashSet and HashMap?,"HashSet contains only values whereas HashMap contains entry(key,value).
HashSet can be iterated but HashMap need to convert into Set to be iterated.",
collections,,What is LinkedHashSet?,Maintains the insertion order - elements gets sorted in which they have been added to the Set,
collections,,What is Iterable? What is Iterator?,"both are interfaces provided by Java's Collection Framework
Iterable - a collection which can be traversed. Allow us to use for-each loop - does happens by 
               internal call to iterator() method on the object.
               for(String el : myList) { }
Iterator - allows us to iterate over some other object which is a collection of some kind.
               Iterator<Integer> Iterator = myList.iterator();
               while(iterator.hasNext()) { int el = iterator.next(); }
               since java 8 we can use: 
                     Iterator<Integer> Iterator = myList.iterator();
                     iterator.forEachRemaining(System.out::println);
                  or
                    for(Integer i: (Iterable<Integer>) () -> iterator) {}",
collections,,"If you have to store elements in a collection, where every element 
should be unique, which Java collection are you going to choose?",Set,
collections,,What is a queue?,"FIFO = First-In-First-Out
interface - implementations: LinkedList, PriorityQueue",
collections,,What is a priorityQueue?,"The elements are ordered according to their natural ordering
The head of this queue it the least element with respect to the specified ordering",
collections,,What is Deque in Java,"interface - implementations: LinkedList, ArrayDeque
supports element insertion and removal at both ends
Deque can act as Queue as well as Stack",
collections,,What is a Stack collection in Java?,LIFO = Last-In-First-Out,
collections,,What are the different Map implementations?,"HashMap, LinkedHashMap, Treemap",
collections,,What is LinkedHashMap?,"Defines the iteration ordering, 
which is normally the order in which keys were inserted into the map (insertion-order)",
collections,,What's the difference in sorting by LinkedHashMap and TreeMap,"TreeMap - sorted according to the natural ordering of its keys
LinkedHashMap - insertion-order",
collections,,How do we compare to BigDecimal objects in Java?,"compareTo method. Depends if it returns -1, 0, 1",
collections,,"If one needs a Set, how do you choose between HashSet vs. TreeSet?","At first glance, HashSet is superior in almost every way: O(1) add, remove and contains, vs. O(log(N)) for TreeSet.",
collections,,What's the complexity when using an array,"Access element by index -> O(1)
Searching -> O(n)
Insertion / Deletion -> O(n)",
collections,,What's the complexity when using an arraylist,"get -> O(1)
add -> O(N), O(1)
contains -> O(N)
remove -> O(N)",
collections,,What's the complexity when using an linkedlist,"get -> O(N)
add -> O(1)
contains -> O(N)
remove -> O(1)",
collections,,What is the complexity of HashSet,"Add -> O(1)
contains -> O(1)
remove -> O(1)",
collections,,What is the complexity of LinkedHashSet,"Add -> O(1)
contains -> O(1)
remove -> O(1)",
collections,,What is the complexity of TreeSet,"Add -> O(log N)
contains -> O(log N)
remove -> O(log N)",
collections,,What is the complexity of using Stack / Queue,"add -> O(1)
get -> O(1)
remove -> O(1)",
collections,,What's the complexity of HashMap / LinkedHashMap,"add -> O(1)
contains -> O(1)
remove -> O(1)",
collections,,What's the complexity of TreeMap,"add -> O(log N)
contains -> O(log N)
remove -> O(log N)",
collections,,"What does ""clear()"" method of Collection interface do?",discard all elements of the collection,
,,What threadsafe collections do you know?,"BlockingQueue
ArrayBlockingQueue
PriorityBlockingDeque
SynchronousQueue
LinkedBlockingDeque
ConcurrentHashMap
ConcurrentSkipListMap - analogous to TreeMap
ConcurrentSkipListSet - analogous to TreeSet
CopyOnWriteArrayList
CopyOnWriteArraySet",
collections,,What does it mean for a collection to be “backed by” another? Give an example of when this property is useful.,"If a collection backs another, it means that changes in one are reflected in the other and vice-versa.",
,,"Which interface would you use to represent a collection 
having non-unique objects in their order of insertion",List / java.util.List,
generics,,What is the advantage of generic collection?,"If we use generic class, we don't need typecasting. 
It is typesafe and checked at compile time.",
,,"What's the problem with following code snippet?
class Q<T> {
   T mem;

   public Q(T arg) {
      mem = arg;
   }
}","Option a): You cannot make a static reference of type T.
Option c) and d): You cannot instantiate the type T or T[]  using new operator.",
generics,,"Is it possible to define or declare generic methods in an interface 
or class even if the class/interface is not generic",Yes,
collections,,What data structure would you choose for storing a password in Java,"char[]

Strings are immutable. That means once you've created the String, if another process can 
dump memory, there's no way (aside from reflection) you can get rid of the data before garbage collection kicks in.

With an array, you can explicitly wipe the data after you're done with it. 
You can overwrite the array with anything you like, and the password won't be present anywhere 
in the system, even before garbage collection.

So yes, this is a security concern - but even using char[] only reduces the window of opportunity 
for an attacker, and it's only for this specific type of attack.",
collections,,"Which concept allows generic collections to interoperate with 
java code that defines collections that use raw types",type erasure,
serialization,,"What is Serialization in Java
>>> Explain it to Not IT guy","Converting object to sequence of bytes

To serialize an object means to convert its state to a byte stream so that the byte stream can be 
reverted back into a copy of the object. A Java object is serializable if its class or any of its 
superclasses implements either the java.io.Serializable interface or its subinterface, 
java.io.Externalizable.",
serialization,,What are the specifics about the serializable interface?,It’s marker-interface,
serialization,,Are constructors and initializers invoked by deserialization,No,
serialization,,Can we serialize a static field,No,
,,What is AutoCloseable in Java,"The interface Closeable extends AutoCloseable and defines one method, close() .
TODO CHECK IF AUTOCLOSEABLE IS NOT A MARKER INTERFACE???",
files,,How can we move a file using Java?,"Files.move(p1, p2, StandardCopyOption.REPLACE_EXISTING)
or
Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING)
Files.delete(p1);",
files,,How to find all roots of the default file system?,"File.listRoots();
FileSystems.getDefault().getRootDirectories();",
files,,How can we print all roots of the default file system?,"FileSystem fs = FileSystems.getDefault();
Iterable<Path> roots = fs.getRootDirectories();
for(Path p : roots)
   Syso(p);",
design pattern,,What is singleton class?,"Singleton class means that any given time only one instance of the class is present, in one JVM.",
design patterns,,What are design patterns (in Java) ?,some coding templates which describe best practices,
design patterns,,What are the major groups of design patterns you know ?,"- Creational
- Structural
- Behavioral patterns.",
design patterns,,Name at least one pattern of the above mentioned groups and give brief description of the problem the pattern resolves ?,"Creational - Factory, Singleton , Builder etc… ; 
Structural - Adapter, Façade, Proxy, Decorator … etc. ; 
Behavioral - Command, Observer, Chain of responsibility …..etc.",
design patterns,,What is the driving factor for using the DAO pattern,"Answer: To reduce code complexity in business objects
Explanation: This is the main objective of the DAO pattern. It allows you to remove the code
that manages storage and retrival of data from the classes that implement business logic 
thereby reducing their complexity.",
thread,, How do you do multithreading in Java,implementing the Runnableinterface / extending the Thread class,
thread,,What is thread?,"A thread is a lightweight subprocess.
It is a separate path of execution.
It is called separate path of execution because each thread runs in a separate stack frame.",
thread,,How do we execute a thread?,by calling a start() method.,
thread,,What will happen if we call thread's start() method twice?,"If we call start() to a thread twice by second call 
the JVM throws an IllegalThreadStateException (RuntimeException)",
thread,,Why does Thread class have wait/notify methods,Because Thread extends Object and Object defines wait/notify,
thread,,What do you know about threads' interruption in Java?,"void interrupt() - sets the interrupt flag to true
in our run() method we implement a logic for how/when/if this thread allows to be interrupted",
thread,,What will happen if someone call interrupt() on a thread which sleeps?,It throws InterruptedException,
thread,,"What will happen by the following code snippet?

1. Thread t1 = new Thread();
2. t1.start();
3. t1.join();","On line 3, the current thread stops and waits until the t1 thread finishes.
On line 4, the t1 thread is dead.
This code may throw checked exception",
thread,,What is a thread pool used for?,"A thread pool reuses previously created threads to execute current tasks and offers a solution 
to the problem of thread cycle overhead and resource thrashing. Since the thread is already 
existing when the request arrives, the delay introduced by thread creation is eliminated, 
making the application more responsive. 
Java Examples: Executors, Executor and ExecutorService",
thread,,What types of thread pools do you know?,"- Single Thread Pool - A thread pool with only one thread. So all the submitted
task will be executed sequentially
ExecutorService newSingleThreadExecutor()

- Cached Thread Pool: A thread pool that create as many threads it needs to
execute the task in parallel. The old available threads will be reused for the
new tasks. If a thread is not used during 60 seconds, it will be terminated
and removed from the pool
ExecutorService newCachedThreadPool()

- Fixed Thread Pool: A thread pool with a fixed number of threads. If a thread
is not available for the task, the task is put in queue waiting for an other
task to ends
ExecutorService newFixedThreadPool(int threadsCount)

- Scheduled Thread Pool: A thread pool made to schedule future task
ScheduledExecutorService newScheduledThreadPool(int threadsCount)

- Single Thread Scheduled Pool: A thread pool with only one thread to
schedule future task
ScheduledExecutorService newSingleThreadScheduledExecutor()",
thread,,What is synchronization?,"Synchronization is the capabilility of control the access of 
multiple threads to any shared resource.
It is used:
    - To prevent thread interference.
    - To prevent consistency problem",
thread,,What is boolean isAlive() method used for?,Tests if this thread is alive. A thread is alive if it has been started and has not yet died,
thread,,What are synchronized methods in Java ?,"Synchronized methods enable a simple strategy for preventing 
thread interference a d memory consistency errors - 
If an object is visible to more than one thread all reads or writes 
to the objects variables are done through synchronized methods.",
thread,,Can we declare an abstract method synchronized?,No. Abstract methods (in abstract classes or interfaces) cannot be declared synchronized.,
thread,,"Does ""sleep()"" method release an lock","If you call the sleep() method of a thread, the thread does not release the lock and it holds 
on to the lock
You can use the join() method to wait for another thread to terminate",
thread,,What are the states of a thread?,"Enum Thread.State.NEW
                                RUNNABLE
                                RUNNING
                                BLOCKED
                                WAITING
                                TIMED_WAITING
                                TERMINATED",
,,"Where can we put ""synchronized"" in Java?","Instance methods
Static methods
Code blocks inside instance methods
Code blocks inside static methods",
thread,,How can we synchronize an object in Java?,,
thread,,"Can Java object be locked down 
for exclusive use by a given thread?","Yes. You can lock an object by putting it in a ""synchronized"" block.
The locked object is inaccessible to any thread other than the one that explicitly claimed it.",
,,"Why are methods like stop(), suspend() and resume() depricated?","stop() - Stopping a thread causes it to unlock all the
monitors that it has locked. If any of the objects previously protected by these
monitors were in an inconsistent state, the damaged objects become visible
to other threads, potentially resulting in arbitrary behavior

suspend() / resume() - If the target thread
holds a lock on the monitor protecting a critical system resource when it is
suspended, no thread can access this resource until the target thread is
resumed. If the thread that would resume the target thread attempts to lock
this monitor prior to calling resume, deadlock results",
thread,,What is deadlock?,"Deadlock is a situation when two threads are waiting on each other to release a resource.
Each thread waiting for a resource which is held by the other waiting thread.",
,,Example for deadlock?,2 treads hold the lock on different resoursec of an object in differerent order,
thread,,How do you avoid a deadlock?,"Don't use locks.
If you must, keep your locks local. Global locks can be really tricky.
Do as little as possible when you hold the lock.
Use stripes to only lock segments of your data.
Prefer Immutable types. ...
Think in design time about deadlocks
Document the lock specifics

tryLock() - returns boolean // lock returns void",
thread,,What is livelock?,when two or more threads actively try to acquire a set of locks,
thread,,What is race conditioning?,"an undesirable result that occurs when two tasks which should be completed sequentially 
are completed at the same time",
,,What is starvation?,Low priorities threads don't be executed,
thread,,What is Lock interface in Java?,"A java.util.concurrent.locks.Lock is a thread synchronization mechanism just like 
synchronized blocks. A Lock is, however, more flexible and more sophisticated than a 
synchronized block. Since Lock is an interface, you need to use one of its implementations to 
use a Lock in your applications. ReentrantLock is one such implementation of Lock interface.",
thread,,"Parallel vs concurrent vs Asynchronous execution 
- Compare the two approaches for execution in the same time","- Parallel programs distribute their tasks to multiple processors, 
  that actively work on all of them simultaneously.
- Concurrent programs handle tasks that are all in progress at the same time, but it is only 
  necessary to work briefly and separately on each task, so the work can be interleaved in 
  whatever order the tasks require.
- An asynchronous program dispatches tasks to devices that can take care of themselves, 
leaving the program free do something else until it receives a signal that the results are finished.",
thread,,Which are the Threadsafe types?,"AtomicBoolean – atomically updatable Boolean value
AtomicInteger – atomically updatable int value, inherits from the number class
AtomicIntegerArray – an int array in which elements can be updated atomically
AtomicLong
AtomicLongArray
AtomicReference<V> - an atomically updatable object reference of type V
AtomicReferenceArray<E> - an atomically updatable array that can hold object references of type E 
                                              (E refers to be base type of elements)",
thread,,Which one is better Lock object or synchronized block?,Lock object better to use than the synchronized block. Locks also support the wait/notify mechanism.,
thread,,What is the benefit of using synchronized keyword over Lock?,"The advantage of using the synchronized keyword (implicit locking) is that you don’t have to
remember to release the lock in a finally block since, at the end of the synchronized block 
(or method), code will be generated to automatically release the lock.
Although this is a useful feature, there are some situations where you may need to control the 
release of the lock manually (to release it other than at the end of that block) 
and the Lock objects provide this flexibility. 
However it is your responsibility to ensure that you release the lock in a finally block while using Lock objects",
thread,,How can we force a thread to wait the execution of other thread?,"If you want to make a thread wait for another thread you can ask it to wait for the wait object 
using the wait() method. A thread remains in the wait state until some other 
thread calls notify() or notifyAll()",
thread,,"Is java.concurrent.locks.Lock object released automatically when
an exception occur.","If a synchronized method throws an exception in its execution the lock acquired by the method 
due to the usage of synchronized keyword is released automatically. The Java exception mechanism
is integrated with the Java synchronization model, so that locks are released if synchronized
statements and invocation of synchronized method complete abruptly. This is not applied to
java.concurrent.locks.Lock. These locks must be released by the programmer explicitly and the
recommended pattern of usage is to be released in finally block.
Note: Only AtomicInteger and AtomicLong extend from Number class. 
           All other classes in java.util.concurrent.atomic inherit directly from Object class. ",
thread,,"What will happen if we call notify/notifyAll without acquiring 
the relevant lock?",Call wait and notify/notifyAll only after acquiring the relevant lock (иначе IllegalMonitorException),
thread,,What is the difference between notify() and notifyAll() methods?,"notify() wakes up one thread waiting for the lock (the first thread that called wait() on that lock)
notifyAll() wakes up all threads waiting for the Lock. The JVM selects one of the threads from 
the list of threads waiting for the lock and wakes that thread up. ",
thread,,Is it possible to separate the locks for read and write operations.,"The ReadWriteLock interface (which extends from the Lock interface) specifies a lock that 
provides separate locks for read-only and write access. You can use the readLock() 
and writeLock() methods to get instances of read and write locks.
The ReentrantReadWriteLock class implements the ReadWriteLock interface.",
thread,,What is java.util.concurrent.Exchanger<V> used for?,"Exchanger – exchanging data between two threads. It waits until both the threads have 
called the exchange() method. When that’s happen the Exchanger object actually 
exchanges the data shared by the threads with each other",
thread,,What is java.util.concurrent.CyclicBarrier used for?,"There are many situations where threads may need to wait at a predefined 
execution point until all other threads reach that point.
CyclicBarrier enables threads to wait at a predefined execution point",
thread,,What's the purpose of java.util.concurrent.Phaser?,"Phaser is used to support a synchronization barrier.
useful feature when few independent threads have to work in phases to complete a task. 
So, a synchronization point is needed for the threads to complete other part of the task and 
do sync-up before advancing to complete the next part of the task.",
,,What is Semaphore in terms of threads?,"Semaphore controls access to one or more shared resources.  
Semaphore – acquire() , release() -> resources from Semaphore",
thread,,What is BlockingQueue?,"BlockingQueue – This interface extends the Queue interface
A Queue that additionally supports operations that wait for the queue to become non-empty when
retrieving an element, and wait for space to become available in the queue when storing an element.",
thread,,What is ArrayBlockingQueue?,"ArrayBlockingQueue – implements BlockingQueue and contains elements of type Delayed. 
An element can be retrieved from this queue only its delay period. ",
thread,,What is WeakHashMap and when to use it?,"WeakHashMap is used for more efficient memory cache.
Example: If we create a HashMap which have big image objects as Values and image names 
as Keys it will be a bad idea, because the value object may occupy a lot of memory.
They’ll never be reclaimed from the hashMap object by a GC process, even when they are 
not in use in our application anymore.
If we want a Map implementation that allows GC to automatically delete unused objects 
we can use WeakHashMap.

Code Example:
WeakHashMap<UniqueImageName, BigImage> map = new WeakHashMap<>();
BigImage bigImage = new BigImage(""image_id"");
UniqueImageName imageName = new UniqueImageName(""name_of_big_image"");
map.put(imageName, bigImage); 
imageName = null;

Note that when we set the imageName reference(the key value) to be null, there are no more 
references pointing to the bigImage object and this entry will be deleted from memory 
by the next GC process.",
thread,,"What will happen If we call start() or setDaemon() methods of 
a thread, that is already started ",it will throw IllegalThreadStateException (runtime),
"garbage 
collection",,What is Garbage Collection?,"Garbage collection is a process of reclaiming the runtime unused objects.
It is performed for memory management.",
thread,,What is a daemon thread?,"A daemon thread is a thread that does not prevent the JVM from exiting when the program 
finishes but the thread is still running. An example for a daemon thread is the garbage collection.

You can use the setDaemon(boolean) method to change the Thread daemon properties before the thread starts.",
garbage collection,,What is System.gc();,"gc() is a daemon thread.
gc() method is defined in System class that is used to send request to JVM to perform garbage collection.",
"garbage 
collection",,Types of garbage collection,"Serial GC
Parallel GC
Parallel Old GC (Parallel Compacting GC)
Concurrent Mark & Sweep GC (or ""CMS"")
Garbage First (G1) GC",
reflection,,What is reflection?,"Reflection is the process of examining or modifying the runtime behaviour of a class at runtime.
It is used in:
- IDE (Integreted Development Environment) e.g. Eclipse, MyEclipse, NetBeans.
- Debugger
- Test Tools etc.",
reflection,,Practical use cases of reflection,"1) Annotation-based serialization libraries often map class fields to JSON keys or XML elements (using annotations). 
    These libraries need reflection to inspect those fields and their annotations and also to access the values 
     during serialization.
2) Model-View-Controller frameworks call controller methods based on routing rules. These frameworks 
    must use reflection to find a method corresponding to an action name, check that its signature conforms to 
    what the framework expects (e.g. takes a Request object, returns a Response), and finally, invoke the method.
3) Dependency injection frameworks lean heavily on reflection. They use it to instantiate arbitrary beans for 
    injection, check fields for annotations such as @Inject to discover if they require injection of a bean, 
    and also to set those values.
4) Object-relational mappers such as Hibernate use reflection to map database columns to fields or 
    getter/setter pairs of a class, and can go as far as to infer table and column names by reading class 
    and getter names, respectively.","Class cls = Class.forName(""MyClass"");
MyClass obj = (MyClass) cls.newInstance();

MyClass2 obj1 = new MyClass2();
MyClass2 obj2 = (MyClass2) obj1.clone();"
algorithms,,Do you know any algorithms? Have you used any?,"Searching algorithms - ...
Sorting algorithms - ...",
algorithms,,Give examples for some algorithms for searching / sorting,,
algorithms,,"Can you describe a Graph. 
What are its applications and how it's implemented?","- A graph is a data structure for storing connected data like a network of people on a social media platform.
- A graph consists of vertices and edges. A vertex represents the entity (for example, people) and an edge 
represents the relationship between entities (for example, a person’s friendships).
- Ways to represent: 
    - An adjacency matrix is a square matrix with dimensions equivalent to the number of vertices in the graph. 
      The elements of the matrix typically have values ‘0’ or ‘1’. A value of ‘1’ indicates adjacency between the 
      vertices in the row and column and a value of ‘0’ otherwise.",
algorithms,,"What is Binary Sorted Tree? 
Have you used it?
What problems have you solved with it?","Binary search tree = ordered tree = sorted binary tree
allow fast lookup, addition and removal of items, and can be used to implement either dynamic sets of items, 
or lookup tables that allow finding an item by its key (e.g., finding the phone number of a person by name).

inary search trees keep their keys in sorted order, so that lookup and other operations can use the principle of 
binary search: when looking for a key in a tree (or a place to insert a new key), they traverse the tree from root 
to leaf, making comparisons to keys stored in the nodes of the tree and deciding, on the basis of the comparison, 
to continue searching in the left or right subtrees. ",
algorithms,,What is the algorithmic complexity for search an element in array?,"Depends on the approach you use
- Linear search
- Binary search",
algorithms,,"What is the algorithmic complexity of 2 nested for loops?
for(int i = 0; i < 1000; i++) {
     for(int j = 0; j < 100000; j++) {
     }
}",O(n^2),
algorithms,,Code a program which can sum the numbers from 1 to 100: 1+2+3+.....+100.,"(100 * 101) / 2

var sum = 0;
for(var i=1; i<101; i++) { sum+=i;} 
console.log(sum);",
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,"Ø (JSE/SE/SSE): Модифицирайте следния код на Java така, че променлива да бъде immutable:",,
,,,,
,,Ø int year = 2018;,,
,,,,
,,Ø (JSE/SE/SSE): Каква е разликата между класовете StringBuilder и StringBuffer в Java?,,
,,,,
,,Ø (JSE/SE/SSE): Какви системи за Version control познавате?,,
,,,,
,,Ø (SE/SSE): Какви са концептуалните разлики между git и SVN?,,
,,,,
,,Ø (SE/SSE): С какви IDE-та имате опит?,,
,,,,
,,Ø (SE/SSE): Explain what is a side-effect.,,